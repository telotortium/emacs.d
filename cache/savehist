;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(helm-grep-history helm-build-regexp-history setenv-history read-envvar-name-history org-refile-history evil-ex-search-history face-name-history junk-hist query-replace-history search-ring slime-minibuffer-history ack-regexp-history org-tags-history org-read-date-history input-method-history Info-search-history woman-topic-history yes-or-no-p-history read-expression-history file-name-history evil-ex-history minibuffer-history extended-command-history))
(setq helm-grep-history '("expire"))
(setq helm-build-regexp-history '("expir"))
(setq setenv-history '("/tmp" "/var/folders/00/1qx3h000h01000cxqpysvccm006zmf/T/"))
(setq read-envvar-name-history '("TMPDIR"))
(setq org-refile-history '("Data Protection/Integrity" "Monitoring" "Q4 OKRs" "Data Protection/Integrity"))
(setq evil-ex-search-history '("ganpati-howto" "jotspot-qa" "group" "Ganpati" "adfads" "boq cre" "cach" "BEGIN_SRC" "PROPERTIES" "====" "=====" "886" "======" "HEA" "=====" "<<<<<<" ">>>>>" "<<<<<" "=======" "TODO" "custom-set" "NEXT" "STARTED" "logs acc" "logs ac" "===" "======" "18" ">>>>" "TODO Calen" "password" "\\\\$" ">>>>>" "Piccolo" "fly" "======" "<<<<<" "======" ">>>>>>" "<<<<" "adfdsa" "asdfasdf" "<<<<<" "safdasdf" "Socialmon" "<<<<<" "48" "Govcloud" "QIP" "jotspot-po" ">>>>>" "57" "adf" "Meg" "Borgl" "in env" "05" ">>>>" "best eff" "fix" "rapture" ">>>" "org-pu" "KR: Sites"))
(setq face-name-history '("all faces"))
(setq search-ring '("expir" "org-p" "org-" "drill" "329" "ws-bu" "define" "long line" "paredit" "init-pre" "slime-fu" "slime-fuzz" "el-swank-fuzz" "fuzzy" "slime" "backup"))
(setq org-tags-history '("p"))
(setq org-read-date-history '("27 18:00    " "   " "+    " "Wed 13:00    " "   " "+ 15:30    " "+    " "   " "Tue    " "   " "Fri    " "   " "2014-12-15    " "   " "+    " "01-12    " "   " "+1    " "Mon    " "   " "Mon    " "11-26    " "   " "    " "12-01    " "+1    " "   " "+0    " "Mon    " "   " "+Mon    " "Mon    " "+9    " "+7    " "Mon    " "   " "Fri    " "+1    " "+20    " "+17    " "+16    " "+15    " "+14    " "   " "+1    " "2014-09-11    " "09-11    " "0911    " "09-08    " "Thu    " "+1    " "   " "    " "   " "Mon    " "+1    " "Thu    " "+1    " "    " "Mon    " "+1    " "   " "08-15    " "08-14    " "08-13    " "08-12    " "08-11    " "   " "+0    " "08-05    " "+1    " "08-05    " "   " "+1    " "   " "    " "06    " "05    " "+1    " "   " "+1    " "   " "    " "Mon    " "   " "    " "   "))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "no" "yes"))
(setq read-expression-history '("(terminal-notifier-notify \"Foo\" \"bar\")" "system-type" "temporary-file-directory" "(get 'temporary-file-directory 'standard-value)" "(setq org-babel-use-quick-and-dirty-noweb-expansion t)" "org-directory" "org-agenda-files" "(customize-variable org-agenda-files (expand-file-name \"agenda_files\" user-emacs-directory))" "(require 'org-learn )" "(require 'org-drill)" "q" "load-path" "(global-set-key \"\\C-cc\" 'org-capture)" "(require 'gtags)" "(require 'gtags-pkg)" "(require 'gtags-mode)" "(require 'gtags)" "org-tag-alist" "org-fast-tag-selection-single-key" "(require 'org)" "(require 'org-mode)" "(org-defkey org-agenda-mode-map \"h\" (lambda () (interactive) (info \"(org) Agenda Commands\")))" "(org-defkey org-agenda-mode-map \"h\" (lambda () (interactive) (info \"(elisp)\")))" "evil-want-C-u-scroll" "(setq visible-bell t)" "org-remember-templates" "(evil-leader/set-key \"<SPC>\" nil)" "(evil-run-next-command-in-emacs-state \"\\C-c\")" "(evil-run-next-command-in-emacs-state \"C-c\")" "(evil-execute-in-emacs-state)" "(evil-run-next-command-in-emacs-state (kbd \"C-c\"))" "(info \"(emacs) Keyboard Macros\")" "(evil-run-next-command-in-emacs-state (kbd \"C-c\"))" "(add-hook 'remember-mode-hook 'org-remember-apply-template)" "smex-history-length"))
(setq file-name-history '("~/Documents/code/sicp-exercises/ch3/*Org Src ch3.org[ scheme ]*" "~/misc/build/freebsd-10.0/usr/src/" "~/.emacs.d/init.el" "~/Google Drive/notes/" "~/Google Drive/" "~/.emacs.d/" "~/.emacs.d/cache" "~/.emacs.d/"))
(setq evil-ex-history '(#("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("!ack expire *.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("w" 0 1 (ex-index 1)) #("!org-git-sync && org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("w" 0 1 (ex-index 1)) #("!org-git-sync && org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("!org-git-push" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("pwd" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("!env" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("vsp ~/.emacs.d/lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33)) #("e notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b sch" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("b ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ../ch4/ch4.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("b ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e ~/Documents/code/sicp-exercises/ch3/ch3/org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("!org-git-sync && org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("w" 0 1 (ex-index 1)) #("qa!" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("!git pull" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("'<,'>!git pull" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("b todo.org<google-org>" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("pwd" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("b todo.org<org>" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15)) #("w" 0 1 (ex-index 1)) #("e ../init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("e ~/.emacs.d/lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("q" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("!org-git-sync && org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("w" 0 1 (ex-index 1)) #("!org-git-sync && org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("!org-git-sync && org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("w" 0 1 (ex-index 1)) #("e lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e ~/.emacs.d/custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("b custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("e todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("e ../home-org/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("e ~/Documents/org/google-org/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37)) #("sp custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("q" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("!git pull" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("!org-git-sync && org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("!git push" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 3445)) #("q" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ../ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ../ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("w" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("e notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e ~/.emacs.d/custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w foo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("!org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("!org-git-sync " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("w" 0 1 (ex-index 1)) #("b notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 2267)) #("q" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("!org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("!org-git-sync " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("!git pull" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("q" 0 1 (ex-index 1)) #("!git credential-corpsso glogin" 0 1 (ex-index 36446) 1 2 (ex-index 36447) 2 3 (ex-index 36448) 3 4 (ex-index 36449) 4 5 (ex-index 36450) 5 6 (ex-index 36451) 6 7 (ex-index 36452) 7 8 (ex-index 36453) 8 9 (ex-index 36454) 9 10 (ex-index 36455) 10 11 (ex-index 36456) 11 12 (ex-index 36457) 12 13 (ex-index 36458) 13 14 (ex-index 36459) 14 15 (ex-index 36460) 15 16 (ex-index 36461) 16 17 (ex-index 36462) 17 18 (ex-index 36463) 18 19 (ex-index 36464) 19 20 (ex-index 36465) 20 21 (ex-index 36466) 21 22 (ex-index 36467) 22 23 (ex-index 36468) 23 24 (ex-index 36469) 24 25 (ex-index 36470) 25 26 (ex-index 36471) 26 27 (ex-index 36472) 27 28 (ex-index 36473) 28 29 (ex-index 36474) 29 30 (ex-index 36475)) #("!git credential-corpsso login" 0 1 (ex-index 36446) 1 2 (ex-index 36447) 2 3 (ex-index 36448) 3 4 (ex-index 36449) 4 5 (ex-index 36450) 5 6 (ex-index 36451) 6 7 (ex-index 36452) 7 8 (ex-index 36453) 8 9 (ex-index 36454) 9 10 (ex-index 36455) 10 11 (ex-index 36456) 11 12 (ex-index 36457) 12 13 (ex-index 36458) 13 14 (ex-index 36459) 14 15 (ex-index 36460) 15 16 (ex-index 36461) 16 17 (ex-index 36462) 17 18 (ex-index 36463) 18 19 (ex-index 36464) 19 20 (ex-index 36465) 20 21 (ex-index 36466) 21 22 (ex-index 36467) 22 23 (ex-index 36468) 23 24 (ex-index 36469) 24 25 (ex-index 36470) 25 26 (ex-index 36471) 26 27 (ex-index 36472) 27 28 (ex-index 36473) 28 29 (ex-index 36474)) #("!git credential-sso login" 0 1 (ex-index 36446) 1 2 (ex-index 36447) 2 3 (ex-index 36448) 3 4 (ex-index 36449) 4 5 (ex-index 36450) 5 6 (ex-index 36451) 6 7 (ex-index 36452) 7 8 (ex-index 36453) 8 9 (ex-index 36454) 9 10 (ex-index 36455) 10 11 (ex-index 36456) 11 12 (ex-index 36457) 12 13 (ex-index 36458) 13 14 (ex-index 36459) 14 15 (ex-index 36460) 15 16 (ex-index 36461) 16 17 (ex-index 36462) 17 18 (ex-index 36463) 18 19 (ex-index 36464) 19 20 (ex-index 36465) 20 21 (ex-index 36466) 21 22 (ex-index 36467) 22 23 (ex-index 36468) 23 24 (ex-index 36469) 24 25 (ex-index 36470)) #("!git pull" 0 1 (ex-index 36446) 1 2 (ex-index 36447) 2 3 (ex-index 36448) 3 4 (ex-index 36449) 4 5 (ex-index 36450) 5 6 (ex-index 36451) 6 7 (ex-index 36452) 7 8 (ex-index 36453) 8 9 (ex-index 36454)) #("!pwd" 0 1 (ex-index 36446) 1 2 (ex-index 36447) 2 3 (ex-index 36448) 3 4 (ex-index 36449)) #("w" 0 1 (ex-index 36446)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("!org-git-sync" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 50652) 1 2 (ex-index 50653)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("!org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("!org-git-sync " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("!org-git-push " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("!org-git-sync " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("w" 0 1 (ex-index 1)) #("!echo $PATH" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("w!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("!/usr/local/git/current/bin/git credential-corpsso login" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50) 50 51 (ex-index 51) 51 52 (ex-index 52) 52 53 (ex-index 53) 53 54 (ex-index 54) 54 55 (ex-index 55) 55 56 (ex-index 56)) #("b *Messages*" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("!/usr/local/git/current/bin/git pull" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36)) #("!echo $PATH" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("!which git" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("!git pull" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("e ~/.emacs.d/lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch3/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("w" 0 1 (ex-index 1)) #("'<,'>s/insert/delete/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("'<,'>s/deque/insert!/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("s/front-deque/rear-deque/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26)) #("'<,'>s/insert/delete/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ~/.profile" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("q" 0 1 (ex-index 1)) #("a" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("w" 0 1 (ex-index 1)) #("%s/ +$//g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("'<,'>s/true/#t/gc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17)) #("'<,'>s/false/#t/gc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("'<,'>s/false/#f/gc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("w" 0 1 (ex-index 1)) #("'<,'>s/recur/make-cs/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("s/as/ss/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/as/bs/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/1/2/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("'<,'>s/Z-H-21/Z-H-22/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("w" 0 1 (ex-index 1)) #("s/32/37/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/32/36/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/32/35/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/33/35/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/32/34/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/33/34/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/32/33/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/27/32/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/27/31/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/27/30/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/27/29/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/27/28/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("'<,'>s/keys/key/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17)) #("s/left/right/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("s/\\<k\\>/n/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("s/\\<k\\>/v/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("s/key/right/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("s/key/left/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("s/key/value/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("s/)$//g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("w" 0 1 (ex-index 1)) #("%s/\\<rec\\>/recur/gc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("w" 0 1 (ex-index 1)) #("b ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("s/)$//g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("w" 0 1 (ex-index 1)) #("'<,'>d" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("s/)//g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("org-babel-tangle" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("w" 0 1 (ex-index 1)) #("'<,'>s/tbl/tbl-inexact/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24)) #("'<,'>s/tbl/tbl-exact/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("w" 0 1 (ex-index 1)) #("pwd" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("b ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("s/24/27/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/24/26/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/24/25/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/23/24/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("s/10/23/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e ~/Documents/code/sicp-exercises/ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("q" 0 1 (ex-index 1)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("b notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("s/22/23/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("'<,'>s/insert/delete/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("'<,'>s/set-rear-ptr/insert-queue/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34)) #("'<,'>s/empty-queue\\?/front-queue/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34)) #("'<,'>s/front/rear/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("'<,'>s/(define (\\([^ ]+\\) queue\\(.*?\\))/((eq? m '\\1)/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50) 50 51 (ex-index 51) 51 52 (ex-index 52) 52 53 (ex-index 53)) #("w" 0 1 (ex-index 1)) #("s/21/22/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("s/20/21/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("s/19/20/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("b ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("e notes." 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w foo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("e ex-3-8.scm" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("w" 0 1 (ex-index 1)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b ch3" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("'<,'>s/7/8/gc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("e ~/Documents/code/sicp-exercises/ch3" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37)) #("q" 0 1 (ex-index 1)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("q" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("q" 0 1 (ex-index 1)) #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w todo.org.recovered" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("w" 0 1 (ex-index 1)) #("b ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("2" 0 1 (ex-index 1)) #("'<,'>s/(include \"test\")/(use test)/gc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37)) #("!ls" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("s/3\\.1/3\\.7/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("s/3\\.1/3\\.6/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("s/3\\.1/3\\.5/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("s/3\\.1/3\\.4/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("s/3\\.1/3\\.3/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("s/3\\.1/3\\.2/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("e ../ch3/ch3.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("!ls" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w! ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("'<,'>org-todo" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("w" 0 1 (ex-index 1)) #("'<,'>s/integerized/reduced/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28)) #("w" 0 1 (ex-index 1)) #("'<,'>s/make-polynomial/make-poly-sparse/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41)) #("w" 0 1 (ex-index 1)) #("s/neg/reduce/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("w" 0 1 (ex-index 1)) #("s/1458/1/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("w" 0 1 (ex-index 1)) #("!killall csi" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("w" 0 1 (ex-index 1)) #("'<,'>s/result/reimproved-result/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33)) #("'<,'>s/result/improved-result/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("w" 0 1 (ex-index 1)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e ~/.emacs.d/lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("w" 0 1 (ex-index 1)) #("e dispatch-table.scm" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("e poly-sparse-package.scm" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25)) #("e dispatch-table.scm" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("e dispatch-table.scm" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) "mx" #("e ../ch1/ex1.15.scm" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("w" 0 1 (ex-index 1)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("b init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15)) #("sp ~/.emacs.d/elpa/slime-20140913.730/contrib/slime-fancy.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50) 50 51 (ex-index 51) 51 52 (ex-index 52) 52 53 (ex-index 53) 53 54 (ex-index 54) 54 55 (ex-index 55) 55 56 (ex-index 56) 56 57 (ex-index 57) 57 58 (ex-index 58) 58 59 (ex-index 59) 59 60 (ex-index 60)) #("q" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("q" 0 1 (ex-index 1)) #("b ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("e lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e slime-presentation-streams.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("e slime-fancy.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("e ~/.emacs.d/elpa/slime-20140913.730/contrib/slime-presentations.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50) 50 51 (ex-index 51) 51 52 (ex-index 52) 52 53 (ex-index 53) 53 54 (ex-index 54) 54 55 (ex-index 55) 55 56 (ex-index 56) 56 57 (ex-index 57) 57 58 (ex-index 58) 58 59 (ex-index 59) 59 60 (ex-index 60) 60 61 (ex-index 61) 61 62 (ex-index 62) 62 63 (ex-index 63) 63 64 (ex-index 64) 64 65 (ex-index 65) 65 66 (ex-index 66) 66 67 (ex-index 67)) #("q" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("e ../init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("e init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("e ~/.emacs.d/lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e lisp/init-local.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("vsp ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("q" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("w" 0 1 (ex-index 1)) #("'<,'>s/^\\([0-9.]+\\)/\\*\\*\\* \\1 ::/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34)) #("'<,'>s/^\\([0-9.]+\\)/\\1 ::/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27)) #("'<,'>s/^\\**//g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("'<,'>s/\\*\\*//g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("'<,'>s/\\n/\\n\\n/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Documents/mckusick/exercises.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) "mx" #("e ~/.emacs.d/elpa/evil-20140803.930/evil-search.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50)) #("e ~/Documents/code/sicp-exercises/ch2/ch2.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("w ~/Documents/mckusick/exercises.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36)) #("pwd" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("Pwd" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("sp ~/Google Drive/notes/mckusick.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36)) #("q" 0 1 (ex-index 1)) #("e sys/libkern/bcd.c" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("e ~/misc/build/freebsd-10.0/usr/src/README" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42)) #("e ~/.emacs.d/elpa/evil-20140803.930/evil-search.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50)) #("e gtags-pkg.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("e ~/.emacs.d/elpa/gtags-3.3/gtags.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e sys/libkern/bcd.c" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("e ~/misc/build/freebsd-10.0/usr/src/README" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42)) #("e ~/Google Drive/notes/notes.org_archive" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40)) #("e todo.org_archive" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("e todo.org_archive~" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("q" 0 1 (ex-index 1)) #("e ~/.emacs.d/elpa/evil-20140803.930/evil-search.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/elpa/evil-20140803.930/evil-search.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50)) #("q" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e ~/.emacs.d/elpa/evil-20140803.930/evil-search.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50)) #("e custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) "mx" #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("e custom.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) "mx" #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) "mx" #("e ~/.emacs.d/elpa/evil-20140803.930/evil-search.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48) 48 49 (ex-index 49) 49 50 (ex-index 50)) "mx" #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) "mx" #("e evil.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) "mx" #("e evil-search.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) "mx" #("e ~/.emacs.d/elpa/evil-20140803.930/evil-core.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43) 43 44 (ex-index 44) 44 45 (ex-index 45) 45 46 (ex-index 46) 46 47 (ex-index 47) 47 48 (ex-index 48)) #("e ~/.emacs.d/elpa/evil-20140803.930/evil-co" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38) 38 39 (ex-index 39) 39 40 (ex-index 40) 40 41 (ex-index 41) 41 42 (ex-index 42) 42 43 (ex-index 43)) #("w" 0 1 (ex-index 1)) #("e ~/emacs-evil-init-minimal.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("w ~/emacs-evil-init-minimal.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) "mx" #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) "mx" #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("q" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("q" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) "mx" #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("'<,'>s/^\\*/\\*\\*/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17)) #("e todo.org_archive" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) "mx" #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("q" 0 1 (ex-index 1)) "mx" #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("q" 0 1 (ex-index 1)) "mx" #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) "mx" #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("e ~/.bashrc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("'<,'>s/TODO/TODO [#C]" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) "mx" #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("w" 0 1 (ex-index 1)) #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("w" 0 1 (ex-index 1)) #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("w" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("w" 0 1 (ex-index 1)) #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("w" 0 1 (ex-index 1)) "mx" #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("w!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("'<,'>s/TODO /TODO Unix Internals /g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35)) #("r /tmp/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15)) #("e!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w /tmp/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("mx" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 9)) "mx" #("q" 0 1 (ex-index 1)) #("vsp" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("mx" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("mx" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("w" 0 1 (ex-index 1)) "mx" #("q" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("w" 0 1 (ex-index 1)) #("b init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) "mx" #("w" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("e notes.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("b todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("q" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("sp ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("q" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("x" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("e evil-maps.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) "mx" #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) "mx" #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e evil-commands.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("e" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) "mx" #("e ~/Google Drive/notes/todo.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) "mx" #("ls" 0 1 (ex-index 1) 1 2 (ex-index 2)) "mx" #("w" 0 1 (ex-index 1)) #("sp ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21)) #("q" 0 1 (ex-index 1)) #("vsp" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("pwd" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("sp ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21)) "mx" #("q" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("e ~/Google Drive/org.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24)) #("mx" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) "mx" #("w" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) "mx" #("ls" 0 1 (ex-index 1290) 1 2 (ex-index 1291)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("h" 0 1 (ex-index 1)) "mx" #("q" 0 1 (ex-index 1)) #("e ~/.emacs.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("tabnew" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("b *scratch*" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("tabnew" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6))))
(setq minibuffer-history '("ev bu" "start-process" "org-show-notification-handler" "syst " "start-process" "org-show-notification-handler" "org-notify" "org-clock-notify-once-if-expired" "/Users/rmirelan/.dotfiles/.emacs.d/elpa/or" "hel fin" "helm-ff-ru" "or " "org-cap" "^customize$" "org cus" "cust" "wi" "org-gi pu" "/ssh:jollyroger.mtv.corp.google.com:.profile" "/ssh:jollyroger:.profile" "temporary-fil" "put" "/ssh:jollyroger:.profile" "setenv" "/ssh:jollyroger.mtv.corp.google.com:.profile" "/ssh:jollyroger.mtv.corp.google.com:~/.profile" "tram cl" "/ssh:jollyroger:.emacs.d/init.el" "/ssh:jollyroger:~/.emacs.d/init.el" "/ssh:j" "/jollyroger.mtv:.emacs.d/lisp/init-local.el" "jollyroger:.emacs.d/lisp/init-local.el" "in " "pare" "run sch" "org ba" "ch3 " "org-gi " "to go" "to " ".*" #("*" 0 1 (face org-level-1 hilit-chg hilit-chg fontified t)) "wid" "to " "org sp" "wid" "hubble" "org spar" "ev reg" "in " "org-age n fil" "" "WORK" "" "WORK" "HOME" "org-age file" #("org-agenda-files" 0 16 (fontified t)) "in " "org-age fil" "cus to" "org-agenda-files" "customize vari" "customize var" "user-em" "expan file" "org-agend file" "cust om varia" "cus " "org rel" "add-to-list" "custom-set-variables" "apply" "custom-set-variables" "35" "8" "todo.org" "org" "run-scheme" "todo.org" "setrunnable" "pfind" "gtags" "custom-set-variables" "org-defkey" "evil-without-input-method-hooks" "org-archive-subtree" "evil-want-C-u-scroll" "org-todo" "DELEGATED" "DONE" "DELEGATED" "clean-aindent-mode" "ring-bell-function" "custom-set-variables" "org-agenda-files" "org-default-notes-file" "org-agenda-files" "org-remember-templates" "evil-leader" "evil-motion-state-map" "quote" "kbd" "evil-emacs-state-p" "evil-ex-define-cmd" "autoload" "smex" "slime-fuzzy" "ac-slime" "slime" "evil-tabs"))
(setq extended-command-history '("helm-find-files" "customize" "org-customize" "widen" "setenv" "tramp-cleanup-this-connection" "paredit-kill" "run-scheme" "org-babel-tangle" "org-sparse-tree" "eval-region" "eval-buffer" "customize-variable" "org-reload" "package-list-packages"))
(setq kill-ring '(#("
" 0 1 (fontified t yank-handler (evil-yank-line-handler))) #("(lambda (msg)
          (start-process \"org-show-notification-handler\"
                         nil
                         tn
                         \"-title\" \"Org Mode\"
                         \"-message\" msg
                         \"-activate\" \"org.gnu.Emacs\"))" 0 1 (hilit-chg hilit-chg fontified t face (rainbow-delimiters-depth-3-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-4-face)) 9 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-4-face)) 13 14 (fontified t) 14 24 (hilit-chg hilit-chg fontified t) 24 25 (hilit-chg hilit-chg fontified t face (rainbow-delimiters-depth-4-face)) 25 39 (fontified t) 39 69 (fontified t face font-lock-string-face) 69 70 (fontified t face font-lock-string-face) 70 96 (hilit-chg hilit-chg fontified t) 96 97 (hilit-chg hilit-chg fontified t) 97 100 (fontified t) 100 125 (hilit-chg hilit-chg fontified t) 125 126 (hilit-chg hilit-chg fontified t) 126 127 (fontified t) 127 153 (hilit-chg hilit-chg fontified t) 153 154 (hilit-chg hilit-chg fontified t face font-lock-string-face) 154 160 (fontified t face font-lock-string-face) 160 161 (fontified t face font-lock-string-face) 161 162 (fontified t) 162 171 (fontified t face font-lock-string-face) 171 172 (fontified t face font-lock-string-face) 172 198 (hilit-chg hilit-chg fontified t) 198 199 (hilit-chg hilit-chg fontified t face font-lock-string-face) 199 207 (fontified t face font-lock-string-face) 207 208 (fontified t face font-lock-string-face) 208 212 (fontified t) 212 238 (hilit-chg hilit-chg fontified t) 238 239 (hilit-chg hilit-chg fontified t face font-lock-string-face) 239 248 (hilit-chg hilit-chg fontified t face font-lock-string-face) 248 249 (hilit-chg hilit-chg fontified t face font-lock-string-face) 249 250 (hilit-chg hilit-chg fontified t) 250 264 (hilit-chg hilit-chg fontified t face font-lock-string-face) 264 265 (hilit-chg hilit-chg fontified t face font-lock-string-face) 265 266 (hilit-chg hilit-chg fontified t face (rainbow-delimiters-depth-4-face)) 266 267 (fontified t face (rainbow-delimiters-depth-3-face))) #(" " 0 1 (hilit-chg hilit-chg fontified t)) #("(and (eq system-type 'darwin) tn)" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 9 (fontified t) 9 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-2-face))) #("let " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) #("((tn (executable-find \"terminal-notifier\")))" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-3-face)) 2 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 22 (fontified t) 22 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face (rainbow-delimiters-depth-4-face)) 42 43 (fontified t face (rainbow-delimiters-depth-3-face)) 43 44 (fontified t face (rainbow-delimiters-depth-2-face))) #("
" 0 1 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler))) #(" 
; (terminal-notifier-notify \"Emacs notification\" \"Something amusing happened\")
 
" 0 1 (face whitespace-trailing fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 1 2 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 2 4 (face font-lock-comment-delimiter-face fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 4 81 (face font-lock-comment-face fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 81 82 (face whitespace-trailing fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 82 83 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler))) #(" " 0 1 (hilit-chg hilit-chg fontified t)) #(" " 0 1 (hilit-chg hilit-chg fontified t)) "(defvar terminal-notifier-command (executable-find \"terminal-notifier\") \"The path to terminal-notifier.\")
 
; (terminal-notifier-notify \"Emacs notification\" \"Something amusing happened\")
 
(defun terminal-notifier-notify (title message)
  \"Show a message with `terminal-notifier-command`.\"
  (start-process \"terminal-notifier\"
                 \"*terminal-notifier*\"
                 terminal-notifier-command
                 \"-title\" title
                 \"-message\" message
                 \"-activate\" \"org.gnu.Emacs\"))" #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) "\"expir\"" #("    - State \"WAITING\"    from \"WAITING\"    [2015-01-26 Mon 13:52]
" 0 4 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 4 6 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 6 13 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 13 20 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 20 31 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 31 38 (hilit-chg hilit-chg fontified t org-todo-head #("WAITING" 0 7 (face (:foreground "orange" :weight bold))) yank-handler (evil-yank-line-handler)) 38 43 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 43 64 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-no-flyspell t fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 64 65 (face org-date rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-no-flyspell t fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 65 66 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler))) #("NEXT" 0 4 (hilit-chg hilit-chg fontified t org-todo-head #("WAITING" 0 7 (face (:foreground "orange" :weight bold))) face (:foreground "blue" :weight bold))) #("    - State \"NEXT\"       from \"WAITING\"    [2015-01-26 Mon 13:52]
" 0 4 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 4 6 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 6 13 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 13 17 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 17 31 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 31 38 (hilit-chg hilit-chg fontified t org-category "todo" org-effort "2:00" yank-handler (evil-yank-line-handler)) 38 43 (fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 43 64 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-no-flyspell t fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 64 65 (face org-date rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-no-flyspell t fontified t hilit-chg hilit-chg yank-handler (evil-yank-line-handler)) 65 66 (org-effort "2:00" org-category "todo" fontified t yank-handler (evil-yank-line-handler))) "" ";;; Automatic tasks exclusion in the agenda with / RET
(defun my-org-auto-exclude-function (tag)
  \"Automatically exclude less interesting tags\"
  ;; Tags passed in are always lower-case
  (when (or
         ;; Non-work items
         (string= tag \"home\")
         ;; SICP
         (string= tag \"sicp\")
         ;; Items on hold
         (string= tag \"hold\"))
    (concat \"-\" tag)))
(setq org-agenda-auto-exclude-function 'my-org-auto-exclude-function)
" #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3")) "" #("logical division" 0 16 (fontified t hilit-chg hilit-chg)) "" "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">
<head>
<title>Structure and Interpretation of Computer Programs (SICP)</title>
<!-- 2015-01-19 Mon 18:46 -->
<meta  http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />
<meta  name=\"generator\" content=\"Org-mode\" />
<meta  name=\"author\" content=\"Robert Irelan\" />
<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type=\"text/javascript\" src=\"http://orgmode.org/mathjax/MathJax.js\"></script>
<script type=\"text/javascript\">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        // Only one of the two following lines, depending on user settings
        // First allows browser-native MathML display, second forces HTML/CSS
        //  config: [\"MMLorHTML.js\"], jax: [\"input/TeX\"],
            jax: [\"input/TeX\", \"output/HTML-CSS\"],
        extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\",
                     \"TeX/noUndefined.js\"],
        tex2jax: {
            inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],
            displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"], [\"\\\\begin{displaymath}\",\"\\\\end{displaymath}\"] ],
            skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\"],
            ignoreClass: \"tex2jax_ignore\",
            processEscapes: false,
            processEnvironments: true,
            preview: \"TeX\"
        },
        showProcessingMessages: true,
        displayAlign: \"center\",
        displayIndent: \"2em\",

        \"HTML-CSS\": {
             scale: 100,
             availableFonts: [\"STIX\",\"TeX\"],
             preferredFont: \"TeX\",
             webFont: \"TeX\",
             imageFont: \"TeX\",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    \"MML\",
                 Firefox: \"MML\",
                 Opera:   \"HTML\",
                 other:   \"HTML\"
             }
        }
    });
/*]]>*///-->
</script>
</head>
<body>
<div id=\"content\">
<h1 class=\"title\">Structure and Interpretation of Computer Programs (SICP)</h1>
<div id=\"table-of-contents\">
<h2>Table of Contents</h2>
<div id=\"text-table-of-contents\">
<ul>
<li><a href=\"#sec-1\">1. <span class=\"todo TODO\">TODO</span> Chapter 3: Modularity, Objects, and State</a>
<ul>
<li><a href=\"#sec-1-1\">1.1. <span class=\"done DONE\">DONE</span> 3.1: Assignment and Local State</a>
<ul>
<li><a href=\"#sec-1-1-1\">1.1.1. <span class=\"done DONE\">DONE</span> 3.1.1: Local State Variables</a></li>
<li><a href=\"#sec-1-1-2\">1.1.2. <span class=\"done DONE\">DONE</span> 3.1.2: The Benefits of Introducing Assignment</a></li>
<li><a href=\"#sec-1-1-3\">1.1.3. <span class=\"done DONE\">DONE</span> 3.1.3: The Costs of Introducing Assignment</a></li>
</ul>
</li>
<li><a href=\"#sec-1-2\">1.2. <span class=\"done DONE\">DONE</span> 3.2: The Environment Model of Evaluation</a>
<ul>
<li><a href=\"#sec-1-2-1\">1.2.1. <span class=\"done DONE\">DONE</span> 3.2.1: The Rules for Evaluation</a></li>
<li><a href=\"#sec-1-2-2\">1.2.2. <span class=\"done DONE\">DONE</span> 3.2.2: Applying Simple Procedures</a></li>
<li><a href=\"#sec-1-2-3\">1.2.3. <span class=\"done DONE\">DONE</span> 3.2.3: Frames as the Repository of Local State</a></li>
<li><a href=\"#sec-1-2-4\">1.2.4. <span class=\"done DONE\">DONE</span> 3.2.4: Internal Definitions</a></li>
</ul>
</li>
<li><a href=\"#sec-1-3\">1.3. <span class=\"done DONE\">DONE</span> 3.3: Modeling with Mutable Data</a>
<ul>
<li><a href=\"#sec-1-3-1\">1.3.1. <span class=\"done DONE\">DONE</span> 3.3.1: Mutable List Structure</a></li>
<li><a href=\"#sec-1-3-2\">1.3.2. <span class=\"done DONE\">DONE</span> 3.3.2: Representing Queues</a></li>
<li><a href=\"#sec-1-3-3\">1.3.3. <span class=\"done DONE\">DONE</span> 3.3.3: Representing Tables</a></li>
<li><a href=\"#sec-1-3-4\">1.3.4. <span class=\"done DONE\">DONE</span> 3.3.4: A Simulator for Digital Circuits</a></li>
<li><a href=\"#sec-1-3-5\">1.3.5. <span class=\"done DONE\">DONE</span> 3.3.5: Propagation of Constraints</a></li>
</ul>
</li>
<li><a href=\"#sec-1-4\">1.4. <span class=\"todo TODO\">TODO</span> 3.4: Concurrency: Time Is of the Essence</a>
<ul>
<li><a href=\"#sec-1-4-1\">1.4.1. <span class=\"done DONE\">DONE</span> Read Section 3.4</a></li>
<li><a href=\"#sec-1-4-2\">1.4.2. <span class=\"todo TODO\">TODO</span> 3.4.1: The Nature of Time in Concurrent Systems</a></li>
<li><a href=\"#sec-1-4-3\">1.4.3. <span class=\"todo TODO\">TODO</span> 3.4.2: Mechanisms for Controlling Concurrency</a></li>
</ul>
</li>
<li><a href=\"#sec-1-5\">1.5. <span class=\"todo TODO\">TODO</span> 3.5: Streams</a>
<ul>
<li><a href=\"#sec-1-5-1\">1.5.1. <span class=\"done DONE\">DONE</span> 3.5.1: Streams Are Delayed Lists</a></li>
<li><a href=\"#sec-1-5-2\">1.5.2. <span class=\"todo TODO\">TODO</span> 3.5.2: Infinite Streams</a></li>
<li><a href=\"#sec-1-5-3\">1.5.3. <span class=\"todo TODO\">TODO</span> 3.5.3: Exploiting the Stream Paradigm</a></li>
<li><a href=\"#sec-1-5-4\">1.5.4. <span class=\"todo TODO\">TODO</span> 3.5.4: Streams and Delayed Evaluation</a></li>
<li><a href=\"#sec-1-5-5\">1.5.5. <span class=\"todo TODO\">TODO</span> 3.5.5: Modularity of Functional Programs and Modularity of Objects</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> <span class=\"todo TODO\">TODO</span> Chapter 3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-19.html#%25_chap_3\">Modularity, Objects, and State</a></h2>
<div class=\"outline-text-2\" id=\"text-1\">
</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">
<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> <span class=\"done DONE\">DONE</span> 3.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1\">Assignment and Local State</a></h3>
<div class=\"outline-text-3\" id=\"text-1-1\">
</div><div id=\"outline-container-sec-1-1-1\" class=\"outline-4\">
<h4 id=\"sec-1-1-1\"><span class=\"section-number-4\">1.1.1</span> <span class=\"done DONE\">DONE</span> 3.1.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1.1\">Local State Variables</a></h4>
<div class=\"outline-text-4\" id=\"text-1-1-1\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-1-1-1\" name=\"sec-1-1-1-1\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.1.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-accumulator initial)
  (lambda (increment)
    (set! initial (+ initial increment))
    initial))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-1\")
(define A (make-accumulator 5))
(test 15
      (A 10))
(test 25
      (A 10))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-1-2\" name=\"sec-1-1-1-2\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.2.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-monitored f)
  (define counter 0)
  (lambda (x)
    (cond ((equal? x 'how-many-calls?)
           counter)
          ((equal? x 'reset-count)
           (set! counter 0))
          (else
           (f x)
           (set! counter (+ counter 1))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-2\")
(define s (make-monitored sqrt))
(test 10
      (s 100))
(test 1
      (s 'how-many-calls?))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-1-3\" name=\"sec-1-1-1-3\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.3.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-3\">
<p>
Modify the <code>make-account</code> procedure so that it creates password-protected
accounts. That is, <code>make-account</code> should take a symbol as an additional
argument, as in
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-account balance password)
  (define (withdraw amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        \"Insufficient funds\"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (if (not (equal? p password))
        (lambda (x) \"Incorrect password\")
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error \"Unknown request -- MAKE-ACCOUNT\"
                           m)))))
  dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-3\")
(define acc (make-account 100 'secret-password))
(test 60
      ((acc 'secret-password 'withdraw) 40))
(test \"Incorrect password\"
      ((acc 'some-other-password 'deposit) 50))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-1-4\" name=\"sec-1-1-1-4\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.4.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-4\">
<p>
As the prompt states, there's little more work involved than to add
a <code>incorrect-password-attempts</code>, which we use to <code>call-the-cops</code> when too many
incorrect attempts in a row have been made. Ideally, a different response
would not be returned to the user when the cops have been called, but I've
decided to do so for ease of testing.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-account balance password)
  (define incorrect-password-attempts 0)
  (define (call-the-cops)
    \"Please wait -- calling the cops...\")
  (define (withdraw amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        \"Insufficient funds\"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (if (not (equal? p password))
        (lambda (x)
          (set! incorrect-password-attempts
                (+ incorrect-password-attempts 1))
          (if (&gt; incorrect-password-attempts 7)
              (call-the-cops)
              \"Incorrect password\"))
        (begin
          (set! incorrect-password-attempts 0)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                (else (error \"Unknown request -- MAKE-ACCOUNT\"
                             m))))))
  dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-4\")
(define acc (make-account 100 'secret-password))
(for-each (lambda (i)
            (test \"Incorrect password\"
                  ((acc 'some-other-password 'withdraw) 100)))
          (iota 7))
(test \"Please wait -- calling the cops...\"
      ((acc 'some-other-password 'withdraw) 100))
</pre>
</div>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-1-2\" class=\"outline-4\">
<h4 id=\"sec-1-1-2\"><span class=\"section-number-4\">1.1.2</span> <span class=\"done DONE\">DONE</span> 3.1.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1.2\">The Benefits of Introducing Assignment</a></h4>
<div class=\"outline-text-4\" id=\"text-1-1-2\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-1-2-1\" name=\"sec-1-1-2-1\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.5.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-2-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (estimate-integral P x1 x2 y1 y2 ntrial)
  ;; Number of trials for which the trial point was inside the region to be
  ;; integrated (i.e., where (= (P x y) #t)).
  (define ninside 0)
  (define (random-x)
    (random-in-range x1 x2))
  (define (random-y)
    (random-in-range y1 y2))
  (define (try x y)
    (if (P x y)
        (set! ninside (+ ninside 1))))
  (for-each (lambda (i)
              (try (random-x) (random-y)))
            (iota ntrial))
  (* (- x2 x1)
     (- y2 y1)
     (/ ninside ntrial)))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-5\")
(define (p-circle)
  (lambda (x y)
    (&gt; (* 1.0 1.0)
       (+ (* x x)
          (* y y)))))
(current-test-epsilon 0.10)
(define pi (* 4 (atan 1 1)))
(parameterize ((current-test-epsilon 0.10))
              (test pi
                    (estimate-integral (p-circle) -2.0 2.0 -2.0 2.0 100000)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-2-2\" name=\"sec-1-1-2-2\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.6.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-2-2\">
<p>
This is a fairly simple modification of the <code>rand</code> command defined in the
book. The main change is to dispatch on a <code>command</code> argument to <code>rand</code>. Also,
since the <code>reset</code> argument sets the seed of the random number generator, I
don't define a <code>random-init</code> variable here. Thus, it is necessary to make at
least one call to <code>(rand 'reset)</code> before using <code>(rand 'generate)</code> to make sure
the seed is initialized.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (rand command)
  (define x nil)                        ; Don't produce random numbers until initialized
  (cond ((equal? command 'generate)
         (set! x (rand-update x))
         x)
        ((equal? command 'reset)
         (lambda (x-init)
           (set! x x-init)))
        (else
         (error \"RAND -- bad command\")
         command)))
</pre>
</div>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-1-3\" class=\"outline-4\">
<h4 id=\"sec-1-1-3\"><span class=\"section-number-4\">1.1.3</span> <span class=\"done DONE\">DONE</span> 3.1.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1.3\">The Costs of Introducing Assignment</a></h4>
<div class=\"outline-text-4\" id=\"text-1-1-3\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-1-3-1\" name=\"sec-1-1-3-1\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.7.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-3-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-3\")
(define (make-joint account original-password new-password)
  (define (dispatch p m)
    ;; The underlying account accepts only original-password, so accept
    ;; new-password by passing original-password. Otherwise, let the underlying
    ;; account deal with error handling for a wrong password.
    (if (equal? p new-password)
        (account original-password m)
        (account p m)))
  dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-7\")
(define acc (make-account 140 'secret-password))
(define joint-acc
  (make-joint acc 'secret-password 'proxy-password))
;;; Both `acc` and `joint-acc` accept the original password, and actions on
;;; either affect the other since `joint-acc` delegates all messages to `acc`.
(test 100
      ((joint-acc 'secret-password 'withdraw) 40))
(test 60
      ((joint-acc 'secret-password 'withdraw) 40))
;;; Neither account works with an unknown password.
(test \"Incorrect password\"
      ((acc 'some-other-password 'deposit) 50))
(test \"Incorrect password\"
      ((joint-acc 'some-other-password 'deposit) 50))
;;; Original account `acc` doesn't work with the proxy password, but the joint
;;; account `joint-acc` does.
(test \"Incorrect password\"
      ((acc 'proxy-password 'withdraw) 20))
(test 40
      ((joint-acc 'proxy-password 'withdraw) 20))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-3-2\" name=\"sec-1-1-3-2\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.8.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-3-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define f
  (let ((cache '()))
    (lambda (x)
      (cond ((null? x) (set! cache '())) ; Allow cache to be cleared.
            ((not (null? cache)) 0)      ; Return 0 if cache isn't clear.
            (else (set! cache x)       ; Set cache if it isn't clear already.
                  x)))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-8\")

;;; Simulate left-to-right evaluation by assigning to temporaries
(define x (f 0))
(define y (f 1))
(test 0
      (+ x y))

;;; Reset cache
(f '())

;;; Right-to-left evaluation
(define y (f 1))
(define x (f 0))
(test 1
      (+ x y))
</pre>
</div>
</div>
</li></ol>
</div>
</div>


<div id=\"outline-container-sec-1-2\" class=\"outline-3\">
<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> <span class=\"done DONE\">DONE</span> 3.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2\">The Environment Model of Evaluation</a></h3>
<div class=\"outline-text-3\" id=\"text-1-2\">
</div><div id=\"outline-container-sec-1-2-1\" class=\"outline-4\">
<h4 id=\"sec-1-2-1\"><span class=\"section-number-4\">1.2.1</span> <span class=\"done DONE\">DONE</span> 3.2.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.1\">The Rules for Evaluation</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-1\">
<p>
No exercises
</p>
</div>
</div>


<div id=\"outline-container-sec-1-2-2\" class=\"outline-4\">
<h4 id=\"sec-1-2-2\"><span class=\"section-number-4\">1.2.2</span> <span class=\"done DONE\">DONE</span> 3.2.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.2\">Applying Simple Procedures</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-2\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-2-2-1\" name=\"sec-1-2-2-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_thm_3.9\">Exercise 3.9.</a><br  /><div class=\"outline-text-5\" id=\"text-1-2-2-1\">
<p>
I don't want to draw, so I'll use Scheme S-expressions instead.
</p>

<p>
In general, each invocation of a procedure creates an environment containing a
reference to its enclosing environment and a list of references to its
parameters. The global environment is much the same except that has a nil
pointer for the enclosing environment since there is no enclosing
environment. In the below, I've represented each parameter as a list of the
symbol name and value, but the symbol name is only preserved here for ease of
following the examples &#x2013; it doesn't necessarily have to be kept in an actual
interpreter.
</p>

<p>
The recursive definition of <code>factorial</code>,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
</pre>
</div>

<p>
spawns a separate environment for each call of <code>factorial</code>, each of which has a
reference to the global environment and the value of its one argument:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define global-env `(() (factorial ,factorial-proc)
                        (fact-iter ,fact-iter-proc)
                        ,@intrinsic-defs))
(define all-envs `((,global-env (n ,6))))
(set! ,all-envs `((,global-env (n ,5)) ,all-envs))
(set! ,all-envs `((,global-env (n ,4)) ,all-envs))
(set! ,all-envs `((,global-env (n ,3)) ,all-envs))
(set! ,all-envs `((,global-env (n ,2)) ,all-envs))
(set! ,all-envs `((,global-env (n ,1)) ,all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(assert (null? all-envs))
</pre>
</div>

<p>
In contrast, the iterative version,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (factorial n)
  (fact-iter 1 1 n))
(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
</pre>
</div>

<p>
because it is tail recursive, replaces the environment of the function from
which a tail recursive call is made with the environment for the target
function of the tail recursive call. Since all function calls in both
<code>factorial</code> and <code>fact-iter</code> are tail recursive, the list of environments
changes basically as described in the pseudocode below:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define global-env `(() (factorial ,factorial-proc)
                     (fact-iter ,fact-iter-proc)
                     ,@intrinsic-defs))
(define all-envs `((global-env (n ,6))))
(set-car! all-envs `(global-env (product ,1)
                                (counter ,1)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,1)
                                (counter ,2)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,2)
                                (counter ,3)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,6)
                                (counter ,4)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,24)
                                (counter ,5)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,120)
                                (counter ,6)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,720)
                                (counter ,7)
                                (max-count ,6)))
(set! all-envs (cdr all-envs))
(assert (null? all-envs))
</pre>
</div>

<p>
Notice above that we've really simulated a stack, with <code>set-car!</code> performing a
mutation-in-place of the top entry of the stack.
</p>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-2-3\" class=\"outline-4\">
<h4 id=\"sec-1-2-3\"><span class=\"section-number-4\">1.2.3</span> <span class=\"done DONE\">DONE</span> 3.2.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.3\">Frames as the Repository of Local State</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-3\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-2-3-1\" name=\"sec-1-2-3-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_thm_3.10\">Exercise 3.10.</a><br  /><div class=\"outline-text-5\" id=\"text-1-2-3-1\">
<p>
The procedure to be analyzed,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
    (lambda (amount)
      (if (&gt;= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          \"Insufficient funds\"))))
</pre>
</div>

<p>
expands to the following when <code>let</code> is expanded to its underlying syntax:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-withdraw initial-amount)
  ((lambda (balance)
     (lambda (amount)
       (if (&gt;= balance amount)
           (begin (set! balance (- balance amount))
                  balance)
           \"Insufficient funds\")))
   initial-amount))
</pre>
</div>

<p>
Without TCE, the function returned by <code>make-withdraw</code> (i.e.,
<code>(lambda (amount) ⋯)</code>), has a pointer the environment of
<code>(lambda (balance) ⋯)</code>, which has a pointer to the global environment. However,
the call to <code>(lambda (balance) ⋯)</code> is in tail position, so it replaces the
environment formed by the call of <code>make-withdraw</code>. When the returned
<code>(lambda (amount) ⋯)</code> is called, it therefore has a pointer to the environment
of <code>(lambda (balance) ⋯)</code>, which points to the global environment.
</p>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-2-4\" class=\"outline-4\">
<h4 id=\"sec-1-2-4\"><span class=\"section-number-4\">1.2.4</span> <span class=\"done DONE\">DONE</span> 3.2.4: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.4\">Internal Definitions</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-4\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-2-4-1\" name=\"sec-1-2-4-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_thm_3.11\">Exercise 3.11.</a><br  /><div class=\"outline-text-5\" id=\"text-1-2-4-1\">
<p>
The environment for <code>make-account</code> points to the global environment. In this
environment exist references to the argument <code>balance</code> as well as the local
procedures <code>withdraw</code>, <code>deposit</code>, and <code>dispatch</code>. Each local procedure points to
the environment of <code>make-account</code> (and retains references to its own arguments
as well). It's necessary to keep references to the local procedures in the
environment of <code>make-account</code> so that <code>dispatch</code> can resolve the references to
<code>withdraw</code> and <code>deposit</code> in its body. (On the other hand, it should not
strictly be necessary to retain a reference to <code>dispatch</code> since a reference to
that procedure is returned.)
</p>
</div>
</li></ol>
</div>
</div>


<div id=\"outline-container-sec-1-3\" class=\"outline-3\">
<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> <span class=\"done DONE\">DONE</span> 3.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3\">Modeling with Mutable Data</a></h3>
<div class=\"outline-text-3\" id=\"text-1-3\">
</div><div id=\"outline-container-sec-1-3-1\" class=\"outline-4\">
<h4 id=\"sec-1-3-1\"><span class=\"section-number-4\">1.3.1</span> <span class=\"done DONE\">DONE</span> 3.3.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.1\">Mutable List Structure</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-1\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-3-1-1\" name=\"sec-1-3-1-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.12\">Exercise 3.12.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)

;;; Nondestructive
(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))

(test z
      '(a b c d))
(test (cdr x)
      '(b))

;;; Destructive
(define w (append! x y))

(test w
      '(a b c d))
(test (cdr w)
      '(b c d))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-2\" name=\"sec-1-3-1-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.13\">Exercise 3.13.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-2\">
<p>
When a circular list is constructed from a linear list, the last cons cell in
the original list has its cdr set to the head of the original list. Thus,
<code>(null? (cdr x))</code> never returns true for any element <code>x</code> in the list and the
<code>last-pair</code> procedure loops around the list forever.
</p>
</div>
</li>

<li><a id=\"sec-1-3-1-3\" name=\"sec-1-3-1-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.14\">Exercise 3.14.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-3\">
<p>
<code>mystery</code> reverses a list destructively:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-14\">(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ((temp (cdr x)))
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
&lt;&lt;ex-3-14&gt;&gt;
(define v '(a b c d))
(define w (mystery v))
(test w
      '(d c b a))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-4\" name=\"sec-1-3-1-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.15\">Exercise 3.15.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-4\">
<p>
In Figure 3.16, modify the diagram so that the arrow pointing to the ~'a~ cell
now points to a ~'wow~ cell.
</p>

<p>
In Figure 3.17, only the arrow pointing to ~'a~ from below now points to ~'wow~
&#x2013; the arrow from above continues to point to ~'a~.
</p>
</div>
</li>

<li><a id=\"sec-1-3-1-5\" name=\"sec-1-3-1-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.16\">Exercise 3.16.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-5\">
<p>
Ben Bitdiddle's flawed procedure:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-16-count-pairs\">(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))
</pre>
</div>

<p>
We define some test data here, containing a simple list, some more complex
linked structures, and a list containing a cycle, for this and the rest of the
exercises in this section.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define pairs-3 '(a b c))
(define pairs-4
  (begin
    (define x '(a b c))
    (set-car! x (cddr x))
    x))
(define pairs-7
  (begin
    (define x '(a b c))
    (set-car! x (cdr x))
    (set-car! (cdr x) (cddr x))
    x))
(define pairs-cycle
  (begin
    (define x '(a b c))
    (set-cdr! (cddr x) x)
    x))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(test 0
      (count-pairs '()))
(test 0
      (count-pairs 'a))
(test 3
      (count-pairs pairs-3))
(test 4
      (count-pairs pairs-4))
(test 7
      (count-pairs pairs-7))
;;; No test for pairs-cycle, because a cycle causes this version of count-pairs
;;; to run forever.
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-6\" name=\"sec-1-3-1-6\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.17\">Exercise 3.17.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-6\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (count-pairs x)
  (let ((seens '()))
    (let inner ((x x))
      (if (or (not (pair? x))
              (memq x seens))
          0
          (begin
            (set! seens (cons x seens))
            (+ (inner (car x))
               (inner (cdr x))
               1))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(include \"ex-3-17-count-pairs\")
(test 0
      (count-pairs '()))
(test 0
      (count-pairs 'a))
(test 3
      (count-pairs pairs-3))
(test 4
      (count-pairs pairs-4))
(test 7
      (count-pairs pairs-7))
(test 3
      (count-pairs pairs-cycle))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-7\" name=\"sec-1-3-1-7\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.18\">Exercise 3.18.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-7\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (cycle? x)
  (let ((seens '()))
    (let inner ((x x))
      (cond ((not (pair? x)) #f)
            ((memq x seens) #t)
            (else (set! seens (cons x seens))
                  (inner (cdr x)))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(include \"ex-3-18\")
(test #f
      (cycle? '()))
(test #f
      (cycle? 'a))
(test #f
      (cycle? pairs-3))
(test #f
      (cycle? pairs-4))
(test #f
      (cycle? pairs-7))
(test #t
      (cycle? pairs-cycle))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-8\" name=\"sec-1-3-1-8\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.19\">Exercise 3.19.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-8\">
<p>
Use <a href=\"http://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare\">Floyd's cycle-finding algorithm</a>, also known as the \"tortoise-and-hare\"
algorithm. Two pointers to the list elements are kept. The \"tortoise\" is
advanced by 1 position for every call, while the \"hare\" is advanced by 2
positions. If a cycle exists, the tortoise and hare will eventually run into
other (i.e., compare equal via <code>eq?</code> after the initial call).
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (cycle? x)
  (define (cdr-safe x)
    (if (not (pair? x))
        x
        (cdr x)))
  (define (cddr-safe x)
    (if (not (pair? x))
        x
        (cdr-safe (cdr x))))
  (define (inner tortoise hare first-run)
    (cond ((any (lambda (p) (not (pair? p)))
                (list tortoise hare))
           #f)
          ((and (not first-run)
                (eq? tortoise hare))
           #t)
          (else (inner (cdr-safe tortoise)
                       (cddr-safe hare)
                       #f))))
  (inner x x #t))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(include \"ex-3-19\")
(test #f
      (cycle? '()))
(test #f
      (cycle? 'a))
(test #f
      (cycle? pairs-3))
(test #f
      (cycle? pairs-4))
(test #f
      (cycle? pairs-7))
(test #t
      (cycle? pairs-cycle))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-9\" name=\"sec-1-3-1-9\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.20\">Exercise 3.20.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-9\">
<p>
Given the implementation of the primitive list functions in terms of
dispatching, now including mutation,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">;;; -d for dispatching.
(define (cons-d x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          ((eq? m 'set-car!) set-x!)
          ((eq? m 'set-cdr!) set-y!)
          (else (error \"Undefined operation -- CONS\" m))))
  dispatch)
(define (car-d z) (z 'car))
(define (cdr-d z) (z 'cdr))
(define (set-car-d! z new-value)
  ((z 'set-car!) new-value)
  z)
(define (set-cdr-d! z new-value)
  ((z 'set-cdr!) new-value)
  z)
</pre>
</div>

<p>
we can understand the environment diagram of the following code
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-20-cons-dispatch\")
(define x (cons 1 2))
(define z (cons x x))
(set-car! (cdr z) 17)
(test 17
      (car x))
</pre>
</div>

<p>
as follows:
</p>

<ul class=\"org-ul\">
<li>Every call to <code>cons-d</code> returns a <code>dispatch</code> closure which has a pointer to
the environment of the <code>cons-d</code> closure, which holds the arguments to
<code>cons-d</code>, <code>x</code> and <code>y</code>.
</li>
<li>All messages to the <code>dispatch</code> closure read or write to the environment of
the original <code>cons-d</code> call, which is preserved by the link from <code>dispatch</code>.
</li>
<li><code>x</code> and <code>y</code>, the arguments to <code>cons-d</code>, are acted upon in precisely the same
way as the <code>car</code> and <code>cdr</code> of a normal <code>cons</code> cell.
</li>
</ul>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-3-2\" class=\"outline-4\">
<h4 id=\"sec-1-3-2\"><span class=\"section-number-4\">1.3.2</span> <span class=\"done DONE\">DONE</span> 3.3.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.2\">Representing Queues</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error \"FRONT called with an empty queue\" queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error \"DELETE! called with an empty queue\" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-3-2-1\" name=\"sec-1-3-2-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.21\">Exercise 3.21.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-2-1\">
<p>
The standard Lisp printer recursively prints the contents of a list (or cons
cell) in order. In particular, this implementation does not treat two pointers
to the same underlying object specially. With the mutation used to implement
the queue, <code>(rear-ptr queue)</code> points to the last item in the queue, while
<code>(front-ptr queue)</code> points to the head of the list that actually stores the
items in the queue. Since the last item is in the queue list, it is printed
twice, once as an element of the list and once as a lone item. (As an aside, it
appears that the queue is keeping the last item alive longer than necessary
through the pointer <code>rear-ptr</code> after the queue is empty. The implementation
should set <code>rear-ptr</code> to nil (or some other small, primitive, immutable value)
to fix this.)
</p>

<p>
Since <code>front-ptr</code> returns a pointer to the list that represents the queue, all
we need to do to print the queue properly is print that list:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (print-queue q)
  (display (front-ptr q)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-2-2\" name=\"sec-1-3-2-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.22\">Exercise 3.22.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-2-2\">
<p>
A straightforward implementation uses the same approach as implementing cons
cells using dispatch &#x2013; the arguments to the constructor, retained by the
<code>dispatch</code> closure, are manipulated by subprocedures in <code>dispatch</code> in the same
way as the car and cdr of the cons cell we use to implement the queue above.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-queue-d)
  (let ((front-ptr '())
        (rear-ptr '()))
    ;; Some of these procedures are defined to return a reference to the queue
    ;; on which the procedure was invoked. For consistency, we define all these
    ;; procedures to take `queue`.
    (define (set-front-ptr! queue item) (set! front-ptr item))
    (define (set-rear-ptr! queue item) (set! rear-ptr item))
    (define (empty-queue? queue) (null? front-ptr))
    (define (front-queue queue)
      (if (empty-queue? queue)
          (error \"FRONT called with an empty queue\" queue)
          (car front-ptr)))
    (define (insert-queue! queue item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue? queue)
               (set-front-ptr! queue new-pair)
               (set-rear-ptr! queue new-pair)
               queue)
              (else
               (set-cdr! rear-ptr new-pair)
               (set-rear-ptr! queue new-pair)
               queue))))
    (define (delete-queue! queue)
      (cond ((empty-queue? queue)
             (error \"DELETE! called with an empty queue\" queue))
            (else
             (set-front-ptr! queue (cdr front-ptr))
             ;; If the queue becomes empty, clear `rear-ptr` to avoid
             ;; unnecessarily retaining a reference to it.
             (when (null? front-ptr)
                   (set-rear-ptr! queue '()))
             queue)))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'set-front-ptr!)
             (lambda (item) (set-front-ptr! dispatch item)))
            ((eq? m 'set-rear-ptr!)
             (lambda (item) (set-rear-ptr! dispatch item)))
            ((eq? m 'empty-queue?)
             (empty-queue? dispatch))
            ((eq? m 'front-queue)
             (front-queue dispatch))
            ((eq? m 'insert-queue!)
             (lambda (item) (insert-queue! dispatch item)))
            ((eq? m 'delete-queue!)
             (delete-queue! dispatch))
            (else
             error \"Undefined operation - QUEUE\" m)))
    dispatch))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-22-queue-dispatch\")
(define q (make-queue-d))
((q 'insert-queue!) 0)
(test 0
      (q 'front-queue))
((q 'insert-queue!) 1)
((q 'insert-queue!) 2)
(test 2
      (car (q 'rear-ptr)))
(q 'delete-queue!)
(test 1
      (q 'front-queue))
(q 'delete-queue!)
(q 'delete-queue!)
(test #t
      (q 'empty-queue?))
(test #t
      (null? (q 'rear-ptr)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-2-3\" name=\"sec-1-3-2-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.23\">Exercise 3.23.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-2-3\">
<p>
Represent as doubly-linked list. Will need selectors for DLL:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-deque)
  (let ((header (cons '() '())))
    ;; Internal procedures on internal representation of deque.
    (define (make-node item prev next)
      (cons (cons item prev) next))
    (define (front) (car header))
    (define (rear) (cdr header))
    (define (set-front! node) (set-car! header node))
    (define (set-rear! node) (set-cdr! header node))
    (define (item node) (caar node))
    (define (prev node) (cdar node))
    (define (next node) (cdr node))
    (define (set-prev! this that) (set-cdr! (car this) that))
    (define (set-next! this that) (set-cdr! this that))

    ;; Exported procedures
    (define (empty? self)
      (eq? (front) '()))
    (define (front-deque self)
      (item (front)))
    (define (rear-deque self)
      (item (rear)))
    (define (front-insert! self item)
      (set-front! (make-node item '() (front))))
    (define (rear-insert! self item)
      (set-rear! (make-node item (rear) '())))
    (define (front-delete! self)
      (set-front! (next (front))))
    (define (rear-delete! self)
      (set-rear! (prev (rear))))

    (define (dispatch m)
      (cond ((eq? m 'empty?) (empty? header))
            ((eq? m 'front-deque) (front-deque header))
            ((eq? m 'rear-deque) (rear-deque header))
            ((eq? m 'front-insert!) (front-insert! header item))
            ((eq? m 'rear-insert!) (rear-insert! header item))
            ((eq? m 'front-delete!) (front-delete! header))
            ((eq? m 'rear-delete!) (rear-delete! header))
            (else (error \"Undefined operation -- DEQUE\" m))))
    dispatch))
</pre>
</div>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-3-3\" class=\"outline-4\">
<h4 id=\"sec-1-3-3\"><span class=\"section-number-4\">1.3.3</span> <span class=\"done DONE\">DONE</span> 3.3.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.3\">Representing Tables</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-3\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-3-3-1\" name=\"sec-1-3-3-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.24\">Exercise 3.24.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-table same-key?)
  (let ((tbl (cons '*table* '())))
    ;; Internal procedure
    (define (assoc key records)
      (cond ((null? records) #f)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    ;; Exported procedures
    (define (lookup key)
      (let ((record (assoc key (cdr tbl))))
        (if record
            (cdr record)
            #f)))
    (define (insert! key value)
      (let ((record (assoc key (cdr tbl))))
        (if record
            (set! (cdr record) value)
            (set! (cdr tbl) (cons (cons key value) (cdr tbl))))))
    ;; Dispatch
    (define (dispatch msg)
      (cond ((equal? msg 'lookup) lookup)
            ((equal? msg 'insert!) insert!)
            (else (error \"TABLE -- unknown message\")))))
    dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-24\")
(use test)

(define tbl-exact (make-table (lambda (x y) (equal? x y))))
(test #f
      ((tbl-exact 'lookup) 'foo))

((tbl-exact 'insert!) 'a 1)
((tbl-exact 'insert!) 'b 2)
((tbl-exact 'insert!) 'c 3)
(test 1
      ((tbl-exact 'lookup) 'a))
(test 2
      ((tbl-exact 'lookup) 'b))
(test 3
      ((tbl-exact 'lookup) 'c))

(define tbl-inexact (make-table (lambda (x y)
                                  (&lt; (abs (- x y)) .1))))
(test #f
      ((tbl-inexact 'lookup) 'foo))
((tbl-inexact 'insert!) 1.0 'x)
(test 'x
      ((tbl-inexact 'lookup) 1.05))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-3-2\" name=\"sec-1-3-3-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.25\">Exercise 3.25.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-table same-key?)
  (let ((tbl (cons '*table* '())))
    (define (assoc key records)
      (cond ((null? records) #f)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup keys)
      (let recur ((elems (cdr tbl))
                  (keys keys))
        (let ((record (assoc (car keys) elems)))
          (if record
              (cond
               ;; If the current key maps to a list, there must be more keys to
               ;; continue the search.
               ((and (pair? (cdr keys)) (pair? (cdr record)))
                (recur (cdr record) (cdr keys)))
               ;; Ensure that e.g. `(lookup '(a b))` does not succeed if
               ;; `(lookup '(a))` does not return a list.
               ((null? (cdr keys))
                (cdr record))
               (else #f))
              #f))))
    (define (insert! keys value)
      (when (null? keys)
            (error \"INSERT! -- keys cannot be empty\"))
      (let recur ((header tbl)
                  (keys keys))
        (define (recursively-insert record)
          (if (null? (cdr keys))
              (set! (cdr record) value)
              (begin
                ;; Obliterate any non-list associated with the current key,
                ;; since it will need to be replaced.
                (when (not (pair? (cdr record)))
                      (set! (cdr record) '()))
                (recur record (cdr keys)))))
        (let ((record (assoc (car keys) (cdr header))))
          (if (pair? record)
              (recursively-insert record)
              (let ((inserted (if record
                                  record
                                  (cons (car keys) '()))))
                (when (not record)
                      (set! (cdr header) (cons inserted (cdr header))))
                (recursively-insert inserted))))))
    (define (dispatch msg)
      (cond ((equal? msg 'lookup) lookup)
            ((equal? msg 'insert!) insert!)
            (else (error \"TABLE -- unknown message\"))))
    dispatch))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-25\")
(use test)

(define (lookup tbl keys)
  ((tbl 'lookup) keys))
(define (insert! tbl keys value)
  ((tbl 'insert!) keys value))
(define tbl (make-table equal?))
(test #f
      (lookup tbl '(a)))
(test #f
      (lookup tbl '(0 1 2)))

(insert! tbl '(a) 'foo)
(insert! tbl '(0 1 2) 'bar)
(test 'foo
      (lookup tbl '(a)))
(test #f
      (lookup tbl '(a b)))
(test 'bar
      (lookup tbl '(0 1 2)))
(test #t
      (pair? (lookup tbl '(0))))

(insert! tbl '(a b) 'baz)
(test 'baz
      (lookup tbl '(a b)))
(test #t
      (pair? (lookup tbl '(a))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-3-3\" name=\"sec-1-3-3-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.26\">Exercise 3.26.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-3\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-table cmp)
  (let ((tbl (cons '*table* '())))
    ;; Accessor functions
    (define (key node) (caar node))
    (define (value node) (cdar node))
    (define (left node) (cadr node))
    (define (right node) (cddr node))
    (define (set-value! node v) (set-cdr! (car node) v))
    (define (set-left! node n) (set-car! (cdr node) n))
    (define (set-right! node n) (set-cdr! (cdr node) n))
    (define (make-node k v) (cons #|payload|#  (cons k v)
                                  #|children|# (cons '() '())))

    (define (lookup k)
      (let recur ((node (cdr tbl)))
        (cond ((null? node) #f)
              ((&lt; (cmp k (key node)) 0) (recur (left node)))
              ((&gt; (cmp k (key node)) 0) (recur (right node)))
              (else (value node)))))
    (define (insert! k v)
      (set! (cdr tbl)
            (let recur ((node (cdr tbl)))
              (cond ((null? node) (make-node k v))
                    ((&lt; (cmp k (key node)) 0)
                     (set-left! node (recur (left node)))
                     node)
                    ((&gt; (cmp k (key node)) 0)
                     (set-right! node (recur (right node)))
                     node)
                    (else (set-value! node v)
                          node)))))
    (define (dispatch msg)
      (cond ((equal? msg 'lookup) lookup)
            ((equal? msg 'insert!) insert!)
            (else (error \"TABLE -- unknown message\"))))
    dispatch))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-26\")
(use test)

(define (lookup tbl key)
  ((tbl 'lookup) key))
(define (insert! tbl key value)
  ((tbl 'insert!) key value))
(define tbl (make-table (lambda (x y)
                          (cond ((&lt; x y) -1)
                                ((&gt; x y) 1)
                                (else 0)))))

(test #f
      (lookup tbl 0))
(insert! tbl 0 'foo)
(test 'foo
      (lookup tbl 0))
(test #f
      (lookup tbl 1))
(insert! tbl -3 'bar)
(test 'foo
      (lookup tbl 0))
(test 'bar
      (lookup tbl -3))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-3-4\" name=\"sec-1-3-3-4\"></a><span class=\"todo HOLD\">HOLD</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.27\">Exercise 3.27.</a>&#xa0;&#xa0;&#xa0;<span class=\"tag\"><span class=\"HOLD\">HOLD</span></span><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-4\">
<ul class=\"org-ul\">
<li>State \"HOLD\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2015-01-18 Sun 19:09]</span></span>
</li>
</ul>

<p>
Ehh&#x2026;
</p>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-3-4\" class=\"outline-4\">
<h4 id=\"sec-1-3-4\"><span class=\"section-number-4\">1.3.4</span> <span class=\"done DONE\">DONE</span> 3.3.4: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.4\">A Simulator for Digital Circuits</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-4\">
<p>
Some common procedures, most copied from the book.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"logic-gates-agenda\")

(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error \"Unknown operation -- WIRE\" m))))
    dispatch))
(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin
        ((car procedures))
        (call-each (cdr procedures)))))
(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-probe log)
  (define (probe name wire)
    (add-action! wire
                 (lambda ()
                   (cons (list name
                               (current-time the-agenda)
                               (get-signal wire))
                         log))))
  probe)
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-3-4-1\" name=\"sec-1-3-4-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.28\">Exercise 3.28.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-28-or-gate\">(define (or-gate a1 a2 output)
  (define (logical-or s1 s2)
    (define (signal-valid s)
      (or (= s 0) (= s 1)))
    (cond ((not (signal-valid s1)) (error \"Invalid signal on a1\" s1))
          ((not (signal-valid s2)) (error \"Invalid signal on a2\" s2))
          ((and (= s1 0) (= s2 0)) 0)
          ((and (= s1 1) (= s2 0)) 1)
          ((and (= s1 0) (= s2 1)) 1)
          ((and (= s1 1) (= s2 1)) 1)
          (else (error \"Unreachable\"))))
  (define (or-action-procedure)
    (let ((new-value
           (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-4-2\" name=\"sec-1-3-4-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.29\">Exercise 3.29.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-2\">
<p>
We use this result from De Morgan's laws
</p>

\\begin{equation*}
a \\vee b = \\neg \\left( \\neg a \\wedge \\neg b \\right)
\\end{equation*}

<p>
to implement the or-gate in terms of and-gates and inverters:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (or-gate a1 a2 output)
  (let ((na (make-wire)) (nb (make-wire))
        (c (make-wire)))
    (inverter a na)
    (inverter b nb)
    (and-gate na nb c)
    (inverter c output)
    'ok))
</pre>
</div>

<p>
This construction is simpler than the primitive and-gate constructed
above. However, its propagation times are more complex &#x2013; the formula for the
total propagation time \\(t_{\\mathrm{total}}\\), where \\(t_{x}\\) is the
propagation delay due to the gate that begins the wire \\(x\\), is
</p>

\\begin{equation*}
t_{\\mathrm{total}} = \\t_{output} + \\t_{c} + \\max{(na, nb)}
\\end{equation*}

<p>
This may be a larger delay than that of the primitive or-gate if the primitive
gate can be manufactured to have a delay similar to that of the and-gate, for
example. On the other hand, if the composition of inverters and and-gates has
enough of an advantage, such as individual speed or cost, over a single
primitive or-gate or-gate for whatever reason, the composed or-gate may still
be preferable.
</p>
</div>
</li>

<li><a id=\"sec-1-3-4-3\" name=\"sec-1-3-4-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.30\">Exercise 3.30.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-3\">
<p>
Straightforward implementation of the diagram:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (ripple-carry-adder as bs ss carry)
  (let ((cs
         ;; Construct the n internal wires needed to link the full-adders
         ;; internally and verify that as, bs, and ss all have the same length.
         (let make-cs ((as as) (bs bs) (ss ss) (cs '()))
              (cond ((and (null? as) (null? bs) (null? ss)) cs)
                    ((null? as) (error \"Too few bits in as\"))
                    ((null? bs) (error \"Too few bits in bs\"))
                    ((null? ss) (error \"Too few bits in ss\"))
                    (else (make-cs (cdr as) (cdr bs) (cdr ss)
                                 (cons (make-wire) cs)))))))
    (let make-adder ((as as) (bs bs) (cs cs) (ss ss) (carry carry))
      (cond ((null? as) 'ok)  ; Only test `as` since all lists have same length.
          (else (full-adder (car as) (car bs) (car cs) (car ss) carry)
                (make-adder (cdr as) (cdr bs) (cdr cs) (cdr ss) (car cs)))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-30\")
(use test)
</pre>
</div>

<p>
The delay is troublesome &#x2013; \\(n \\mathrm{delay}_{\\mathrm{full-adder}}\\).
</p>
</div>
</li>

<li><a id=\"sec-1-3-4-4\" name=\"sec-1-3-4-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.31\">Exercise 3.31.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-4\">
<p>
If the procedure is merely added without executing it, the state of the circuit
can become inconsistent until the first change to the inputs is made. For
example, consider the execution of <code>(half-adder a b s c)</code>, with <code>a</code> and <code>b</code>
initially <code>1</code> and <code>s</code> and <code>c</code> initially <code>0</code>. Without the argument <code>proc</code> being
called immediately on the call to <code>accept-action-procedure!</code>, no calls to
<code>set-my-signal!</code>, which is the only means now to call any of the
<code>action-procedures</code>, are made, so <code>s</code> and <code>c</code> remain set to <code>0</code> until the first
input is set.
</p>
</div>
</li>

<li><a id=\"sec-1-3-4-5\" name=\"sec-1-3-4-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.32\">Exercise 3.32.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-5\">
<p>
It is necessary to execute the events in the same queue (i.e., those that take
place \"at the same time\") in FIFO order because it is in fact the case that the
and-gate observes the change to <code>a1</code> while it is scheduling <code>a2</code>.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"FIFO-agenda\">(define agenda
  '((0 ((lambda () (set-a1! 0))
        (lambda () (set-a2! 1))))
    ;; Stable value of and-gate output after initialization.
    (5 ((lambda () (assert-output 0))))
    ;; Change a1 and a2 simultaneously.
    (10 ((lambda () (set-a1! 1))
         (lambda () (set-a2! 0))))
    (13 ((lambda ()
           ;; Lexical capture of new-value at t = 10 after setting just a1.
           (set-output! 1))
         (lambda ()
           ;; Lexical capture of new-value at t = 10 after setting a1 followed
           ;; by a2.
           (set-output! 0))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"LIFO-agenda\">(define agenda
  '((0 ((lambda () (set-a1! 0))
        (lambda () (set-a2! 1))))
    ;; Stable value of and-gate output after initialization.
    (5 ((lambda () (assert-output 0))))
    ;; Change a1 and a2 simultaneously.
    (10 ((lambda () (set-a1! 1))
         (lambda () (set-a2! 0))))
    (13 ((lambda ()
           ;; Lexical capture of new-value at t = 10 after setting a1 followed
           ;; by a2.
           (set-output! 0))
         (lambda ()
           ;; Lexical capture of new-value at t = 10 after setting just a1.
           ;; THIS IS THE INCORRECT RESULT.
           (set-output! 1))))))
</pre>
</div>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-3-5\" class=\"outline-4\">
<h4 id=\"sec-1-3-5\"><span class=\"section-number-4\">1.3.5</span> <span class=\"done DONE\">DONE</span> 3.3.5: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.4\">Propagation of Constraints</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-5\">
<p>
Implementation of constraint objects from book. Includes the primitive
procedures
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">;;; Primitive connector construction
(define (make-connector)
  (let ((value #f) (informant #f) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (error \"Contradiction\" (list value newval)))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant #f)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints
                (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant #t #f))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (error \"Unknown operation -- CONNECTOR\"
                         request))))
    me))

;;; Convenience procedures for make-connector.
(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))
(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))
</pre>
</div>

<p>
and some commonly used constraints, implemented in terms of the primitives:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"constraint-primitive\")

;;; Adder constraint between summands and sum
(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- ADDER\" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

;;; Multiplier constraint between multiplicands and product.
(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- MULTIPLIER\" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

;;; Constrain connector to a constant
(define (constant value connector)
  (define (me request)
    (error \"Unknown request -- CONSTANT\" request))
  (connect connector me)
  (set-value! connector value me)
  me)

;;; Print a message about setting or unsetting of a connector (e.g., for
;;; testing).
(define (probe name connector)
  (define (print-probe value)
    (display \"Probe: \")
    (display name)
    (display \" = \")
    (display value)
    (newline))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe \"?\"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- PROBE\" request))))
  (connect connector me)
  me)
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-3-5-1\" name=\"sec-1-3-5-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.33\">Exercise 3.33.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (averager a b c)
  (let ((half (make-connector))
        (sum (make-connector)))
    (constant 0.5 half)
    (adder a b sum)
    (multiplier half sum c)
    'ok))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-5-2\" name=\"sec-1-3-5-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.34\">Exercise 3.34.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-2\">
<p>
The procedure suggested by Louis won't work when propagation from the
product to the multiplicands is needed. <code>multiplier</code> needs at least two of
<code>m1</code>, <code>m2</code>, and <code>product</code> to be set in order to propagate the constraint from
the set values to the unset value. However, if one of the multiplicands is
unset, both are, a situation that <code>multiplier</code> can't handle.
</p>
</div>
</li>

<li><a id=\"sec-1-3-5-3\" name=\"sec-1-3-5-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.35\">Exercise 3.35.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-3\">
<p>
Straightforward implementation based on <code>multiplier</code>:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (&lt; (get-value b) 0)
            (error \"square less than 0 -- SQUARER\" (get-value b))
            (set-value! a (sqrt b)))
        (let ((aval (get-value a)))
          (set-value! b (* aval aval))))
  (define (process-forget-value)
    (forget-value! b me)
    (forget-value! a me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- SQUARER\" request))))
  (connect a me)
  (connect b me)
  me)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-5-4\" name=\"sec-1-3-5-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.36\">Exercise 3.36.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-4\">
<p>
Do in class.
</p>
</div>
</li>

<li><a id=\"sec-1-3-5-5\" name=\"sec-1-3-5-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.37\">Exercise 3.37.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-5\">
<p>
The expression-oriented constraint adder is defined thus in the book:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"constraint-adder-expression\">(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
</pre>
</div>

<p>
We define similar procedures for subtraction, multiplication, division, and
constant values:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"constraint-common\")

&lt;&lt;constraint-adder-expression&gt;&gt;

;;; Constant
(define (cv x)
  (let ((z (make-connector)))
    (constant x z)
    z))

;;; Subtraction
(define (c- x y)
  ;; $x - y = z \\Rightarrow x = y + z$ to avoid having to introduce an
  ;; additional multiplier and constant constraint.
  (let ((z (make-connector)))
    (adder y z x)
    z))

;;; Multiplication
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))

;;; Division
(define (c/ x y)
  ;; $x / y = z \\Rightarrow x = y * z$ to avoid having to implement division as
  ;; a primitive constraint. Pray that $y \\neq 0$.
  (let ((z (make-connector)))
    (multiplier y z x)
    z))
</pre>
</div>
</div>
</li></ol>
</div>
</div>


<div id=\"outline-container-sec-1-4\" class=\"outline-3\">
<h3 id=\"sec-1-4\"><span class=\"section-number-3\">1.4</span> <span class=\"todo TODO\">TODO</span> 3.4: Concurrency: Time Is of the Essence</h3>
<div class=\"outline-text-3\" id=\"text-1-4\">
</div><div id=\"outline-container-sec-1-4-1\" class=\"outline-4\">
<h4 id=\"sec-1-4-1\"><span class=\"section-number-4\">1.4.1</span> <span class=\"done DONE\">DONE</span> Read Section 3.4</h4>
<div class=\"outline-text-4\" id=\"text-1-4-1\">
<ul class=\"org-ul\">
<li>State \"DONE\"       from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 15:07]</span></span>
</li>
</ul>
<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 14:42]</span></span>
</li>
</ul>
<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>
</div>

<div id=\"outline-container-sec-1-4-2\" class=\"outline-4\">
<h4 id=\"sec-1-4-2\"><span class=\"section-number-4\">1.4.2</span> <span class=\"todo TODO\">TODO</span> 3.4.1: The Nature of Time in Concurrent Systems</h4>
<div class=\"outline-text-4\" id=\"text-1-4-2\">
<p>
Complexity of concurrent systems comes from:
</p>

<ul class=\"org-ul\">
<li>Dependence of ordering of events in a system with mutation.
</li>
<li>Reduced ability to control ordering of events, and difficulty in mentally
taking this into account.
</li>
</ul>

<p>
Concurrency models:
</p>

<ul class=\"org-ul\">
<li>No two operations on any shared state variable can occur at the same
time. Too strict for most uses (for example, implies that only one
transaction can occur at a time in a bank system).
</li>
<li>System must proceed as if events had been executed sequentially in <i>some</i>
  order (not guaranteed what order is used).
<ul class=\"org-ul\">
<li>There can still be more than one \"correct\" answer &#x2013; may need to restrict
some parts of the program further depending on requirements.

<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 16:41]</span></span> <br  />
</li>
<li>State \"STARTED\"    from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 14:26]</span></span>
     Want SRFI-18 to support concurrency.
</li>
</ul>
<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</li>
</ul>
</li>
</ul>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-4-2-1\" name=\"sec-1-4-2-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.38\">Exercise 3.38.</a><br  /><div class=\"outline-text-5\" id=\"text-1-4-2-1\">
<ol class=\"org-ol\">
<li>There are 6 combinations of Peter (A), Paul (B), and Mary (C):

<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">


<colgroup>
<col  class=\"left\" />

<col  class=\"right\" />
</colgroup>
<thead>
<tr>
<th scope=\"col\" class=\"left\">Order</th>
<th scope=\"col\" class=\"right\">Final amount</th>
</tr>
</thead>
<tbody>
<tr>
<td class=\"left\">(A, B, C)</td>
<td class=\"right\">45</td>
</tr>

<tr>
<td class=\"left\">(A, C, B)</td>
<td class=\"right\">35</td>
</tr>

<tr>
<td class=\"left\">(B, A, C)</td>
<td class=\"right\">45</td>
</tr>

<tr>
<td class=\"left\">(B, C, A)</td>
<td class=\"right\">50</td>
</tr>

<tr>
<td class=\"left\">(C, A, B)</td>
<td class=\"right\">40</td>
</tr>

<tr>
<td class=\"left\">(C, B, A)</td>
<td class=\"right\">40</td>
</tr>
</tbody>
</table>
</li>

<li>For transactions A and B, there are 3 steps:

<ul class=\"org-ul\">
<li>Read the current balance from the shared account [Xr].
</li>
<li>Perform the calculation.
</li>
<li>Write the new balance to the shared account [Xw].
</li>
</ul>
<p>
However, transaction C reads the shared variable <code>balance</code> twice, so there
are 5 steps:
</p>

<ul class=\"org-ul\">
<li>Read the current balance from the shared account [Cr1].
</li>
<li>Perform the division.
</li>
<li>Read the current balance from the shared account [Cr2].
</li>
<li>Perform the subtraction.
</li>
<li>Write the new balance to the shared account [Cw].
</li>
</ul>
<p>
The calculations don't modify a shared variable, so the relevant
combinations for each transaction are combinations of Ar, Aw, Br, Bw, Cr1,
Cr2, and Cw, with the constraint that \\(t(Ar) \\leq t(Aw)\\),
\\(t(Br) \\leq t(Bw)\\), and \\(t(Cr1) \\leq t(Cr2) \\leq t(Cw)\\) or
\\(t(Cr2) \\leq t(Cr1) \\leq t(Cw)\\).
</p>
</li>
</ol>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-4-3\" class=\"outline-4\">
<h4 id=\"sec-1-4-3\"><span class=\"section-number-4\">1.4.3</span> <span class=\"todo TODO\">TODO</span> 3.4.2: Mechanisms for Controlling Concurrency</h4>
<div class=\"outline-text-4\" id=\"text-1-4-3\">
<p>
There are too many possible orderings of concurrent processes to ensure a
single answer or to analyze in many cases.
</p>

<p>
Serializer:
</p>
<ul class=\"org-ul\">
<li>Ensures that only one procedure under the control of the serializer can be
executed at a time.
</li>
<li>Example: In the below, <code>foo</code> and <code>bar</code> are guaranteed to not execute at the
same time (i.e., their execution is <i>serialized</i>).

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define s (make-serializer))
(parallel-execute (s (foo))
                  (s (bar)))
</pre>
</div>
</li>

<li>Implemented in terms of <i>mutexes</i>.
</li>
<li>Mutex implemented as a spin lock using a test-and-set instruction.
</li>
</ul>

<p>
Here's an implementation of the threading tools <code>parallel-execute</code> and
<code>make-serializer</code> using SRFI-18 mutexes and threads:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use srfi-18)

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex-lock! mutex)
        (let ((val (apply p args)))
          (mutex-unlock! mutex)
          val))
      serialized-p)))

(define (parallel-execute . fs)
  (let ((ts (map make-thread fs)))
    (for-each thread-start! ts)
    (for-each thread-join! ts)
    '()))
</pre>
</div>

<ul class=\"org-ul\">
<li>State \"HOLD\"       from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-12-10 Wed 19:54]</span></span> <br  />
     Do at some point
</li>
</ul>
<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 17:31]</span></span> <br  />
     Implemented those two functions.
</li>
</ul>
<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 17:11]</span></span>
</li>
</ul>
<p>
Need to implement <code>make-serializer</code> and perhaps <code>parallel-execute</code>.
</p>
<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-4-3-1\" name=\"sec-1-4-3-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.39\">Exercise 3.39.</a><br  /></li>
<li><a id=\"sec-1-4-3-2\" name=\"sec-1-4-3-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.40\">Exercise 3.40.</a><br  /></li>
<li><a id=\"sec-1-4-3-3\" name=\"sec-1-4-3-3\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.41\">Exercise 3.41.</a><br  /></li>
<li><a id=\"sec-1-4-3-4\" name=\"sec-1-4-3-4\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.42\">Exercise 3.42.</a><br  /></li>
<li><a id=\"sec-1-4-3-5\" name=\"sec-1-4-3-5\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.43\">Exercise 3.43.</a><br  /></li>
<li><a id=\"sec-1-4-3-6\" name=\"sec-1-4-3-6\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.44\">Exercise 3.44.</a><br  /></li>
<li><a id=\"sec-1-4-3-7\" name=\"sec-1-4-3-7\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.45\">Exercise 3.45.</a><br  /></li>
<li><a id=\"sec-1-4-3-8\" name=\"sec-1-4-3-8\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.46\">Exercise 3.46.</a><br  /></li>
<li><a id=\"sec-1-4-3-9\" name=\"sec-1-4-3-9\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.47\">Exercise 3.47.</a><br  /></li>
<li><a id=\"sec-1-4-3-10\" name=\"sec-1-4-3-10\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.48\">Exercise 3.48.</a><br  /></li>
<li><a id=\"sec-1-4-3-11\" name=\"sec-1-4-3-11\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.49\">Exercise 3.49.</a><br  /></li></ol>
</div>
</div>

<div id=\"outline-container-sec-1-5\" class=\"outline-3\">
<h3 id=\"sec-1-5\"><span class=\"section-number-3\">1.5</span> <span class=\"todo TODO\">TODO</span> 3.5: Streams</h3>
<div class=\"outline-text-3\" id=\"text-1-5\">
<p>
Basic stream procedures used throughout the section.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">&lt;&lt;stream-primitives&gt;&gt;
&lt;&lt;stream-fold&gt;&gt;

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
&lt;&lt;stream-map-poly&gt;&gt;
(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))
(define (stream-filter proc s)
  (cond ((stream-null? s) the-empty-stream)
        ((proc (stream-car s))
         (cons-stream (stream-car s)
                      (stream-filter proc (stream-cdr s))))
        (else
         (stream-filter proc (stream-cdr s)))))
(define (display-line x)
  (newline)
  (display x))
(define (display-stream s)
  (stream-for-each display-line s))
(define (stream-enumerate-interval low high)
  (if (&gt; low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))
</pre>
</div>

<p>
We start with the primitive procedures on the stream data type:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-primitives\">(define the-empty-stream 'the-empty-stream)
(define (stream-null? s) (eq? s the-empty-stream))
(define-syntax cons-stream
  (syntax-rules ()
    ((cons-stream a b)
     (cons a (delay b)))))
(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))
</pre>
</div>

<p>
Another very useful and generally-applicable stream function is <code>fold</code>. In
fact, both <code>map</code> and <code>filter</code> can be implemented in terms of <code>fold</code>:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-fold\">(define (stream-fold kons knil . streams)
  (if (or (map stream-null? streams))
      knil
      (cons-stream (apply kons (append (map stream-car streams)
                                       knil))
                   (apply stream-fold kons knil (map stream-cdr streams)))))
</pre>
</div>
</div>

<div id=\"outline-container-sec-1-5-1\" class=\"outline-4\">
<h4 id=\"sec-1-5-1\"><span class=\"section-number-4\">1.5.1</span> <span class=\"done DONE\">DONE</span> 3.5.1: Streams Are Delayed Lists</h4>
<div class=\"outline-text-4\" id=\"text-1-5-1\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-5-1-1\" name=\"sec-1-5-1-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.50\">Exercise 3.50.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-1-1\">
<p>
The <code>apply</code> procedure can be used to call a function with arguments drawn from
a list, and we can iterate along the argument streams in turn (which are all
assumed to be of the same length):
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-map-poly\">(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (map stream-car argstreams))
       (apply stream-map
              (cons proc (map stream-cdr argstreams))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(use test)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-1-2\" name=\"sec-1-5-1-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.51\">Exercise 3.51.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-1-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(define (show x) (display-line x) x)
(define x (stream-map show (stream-enumerate-interval 0 10)))
(stream-ref x 5)
(stream-ref x 7)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-1-3\" name=\"sec-1-5-1-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.52\">Exercise 3.52.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-1-3\">
<p>
We have these definitions, which in particular include a mutating procedure
<code>accum</code>:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(use test)
(define sum 0)
(define (accum x)
  (set! sum (+ x sum))
  sum)
(define seq (stream-map accum (stream-enumerate-interval 1 20)))
(define y (stream-filter even? seq))
(define z (stream-filter (lambda (x) (= (remainder x 5) 0))
                         seq))

&lt;&lt;ex-3-52-eval-y&gt;&gt;
&lt;&lt;ex-3-52-eval-z&gt;&gt;
</pre>
</div>

<p>
First, we obtain the 7<sup>th</sup> element of <code>y</code>, which is the 14<sup>th</sup> element of <code>seq</code>,
obtaining the expected result of \\( \\sum_{i=1}^{14} i = 136 \\):
</p>
<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-52-eval-y\">(stream-ref y 7)
(test 136
      sum)
</pre>
</div>

<p>
Next, we look at <code>z</code>, which should contain only those entries of <code>seq</code>
divisible by <code>5</code>. Since \\( \\sum_{i=1}^{n} i = \\frac{n(n + 1)}{2} \\), we expect
that both every \\(i\\)<sup>th</sup> entry and \\(i-1\\)<sup>th</sup> entry of
<code>(stream-enumerate-interval 1 20)</code> should produce a corresponding entry in <code>z</code>,
and this is what we indeed observe, finally obtaining <code>(= sum 210)</code>.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-52-eval-y\">(display-stream z)
(test 210
      sum)
</pre>
</div>

<p>
However, if <code>delay</code> did not cache its results, the mutation in <code>accum</code> would
cause a different result to be obtained for <code>z</code> (but not for <code>y</code>, since it was
the first evaluated). The execution of <code>y</code> would have gone through the first 14
integers, as before, giving <code>(= sum 136)</code>. The values of <code>seq</code> when <code>z</code> was
executed would therefore all be increased by 136, producing a different stream
for <code>z</code> and a final sum of \\(136 + 210 = 346\\).
</p>


<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-5-2\" class=\"outline-4\">
<h4 id=\"sec-1-5-2\"><span class=\"section-number-4\">1.5.2</span> <span class=\"todo TODO\">TODO</span> 3.5.2: Infinite Streams</h4>
<div class=\"outline-text-4\" id=\"text-1-5-2\">
<p>
The book defines several miscellaneous procedures that are useful for exercises
in this section:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")

(define (integers-starting-from n)
  (cons-stream n (integers-starting-from (+ n 1))))

(define integers (integers-starting-from 1))

(define (add-streams s1 s2)
  (stream-map + s1 s2))
(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

&lt;&lt;stream-partial-sums&gt;&gt;
&lt;&lt;stream-pairs&gt;&gt;
</pre>
</div>

<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-5-2-1\" name=\"sec-1-5-2-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.53\">Exercise 3.53.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-1\">
<p>
This produces a stream consisting of the powers of 2: <code>1 2 4 8 16 ...</code>.
</p>
</div>
</li>

<li><a id=\"sec-1-5-2-2\" name=\"sec-1-5-2-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.54\">Exercise 3.54.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\"></pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-2-3\" name=\"sec-1-5-2-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.55\">Exercise 3.55.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-3\">
<p>
In order to calculate the partial sum corresponding to an element in the input
stream, you need two pieces of information: the partial sum of the elements
before this one and the element itself. This is most easily done using
recursion. The recursive function call tracks in its parameters the partial sum
of the preceding elements and the start of the remaining input stream and
returns the entire output stream.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-partial-sums\">(include \"stream\")
(define (partial-sums s)
  (let rec ((partial-sum 0)
            (s s))
    (if (stream-null? s)
        the-empty-stream
        (let ((new-sum (+ partial-sum (stream-car s))))
          (cons-stream new-sum
                       (rec new-sum (stream-cdr s)))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"stream-util\")

(test 15
      (stream-ref (partial-sums integers) 4))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-2-4\" name=\"sec-1-5-2-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.56\">Exercise 3.56.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-4\">
<p>
The <code>merge</code> procedure combines two streams ordered in ascending order,
eliminating repetitions:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-merge\">(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((&lt; s1car s2car)
                  (cons-stream s1car (merge (stream-cdr s1) s2)))
                 ((&gt; s1car s2car)
                  (cons-stream s2car (merge s1 (stream-cdr s2))))
                 (else
                  (cons-stream s1car
                               (merge (stream-cdr s1)
                                      (stream-cdr s2)))))))))
</pre>
</div>

<p>
Given this, we can create <code>S</code>, the list of integers with no prime factors but
2, 3, and 5:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")
&lt;&lt;stream-merge&gt;&gt;

(define S (cons-stream 1 (merge (scale-stream S 2)
                                (merge (scale-stream S 3)
                                       (scale-stream S 5)))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-2-5\" name=\"sec-1-5-2-5\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.57\">Exercise 3.57.</a><br  /></li>
<li><a id=\"sec-1-5-2-6\" name=\"sec-1-5-2-6\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.58\">Exercise 3.58.</a><br  /></li>
<li><a id=\"sec-1-5-2-7\" name=\"sec-1-5-2-7\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.59\">Exercise 3.59.</a><br  /></li>
<li><a id=\"sec-1-5-2-8\" name=\"sec-1-5-2-8\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.60\">Exercise 3.60.</a><br  /></li>
<li><a id=\"sec-1-5-2-9\" name=\"sec-1-5-2-9\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.61\">Exercise 3.61.</a><br  /></li>
<li><a id=\"sec-1-5-2-10\" name=\"sec-1-5-2-10\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.62\">Exercise 3.62.</a><br  /></li></ol>
</div>

<div id=\"outline-container-sec-1-5-3\" class=\"outline-4\">
<h4 id=\"sec-1-5-3\"><span class=\"section-number-4\">1.5.3</span> <span class=\"todo TODO\">TODO</span> 3.5.3: Exploiting the Stream Paradigm</h4>
<div class=\"outline-text-4\" id=\"text-1-5-3\">
<p>
For convenience:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-pairs\">(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))
(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-5-3-1\" name=\"sec-1-5-3-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.63\">Exercise 3.63.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-1\">
<p>
<b>TODO</b>: Explain better.
</p>

<p>
First, note that both procedures are inefficient without memoization, because
<code>guesses</code> has to be evaluated always in Alyssa's version as well. However, with
memoization, the <code>guesses</code> variable is bound in the environment of
<code>sqrt-stream</code>, so the delayed cdr of the stream returned by <code>cons-stream</code> is
memoized after the first call.
</p>
</div>
</li>

<li><a id=\"sec-1-5-3-2\" name=\"sec-1-5-3-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.64\">Exercise 3.64.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-2\">
<p>
A straightforward recursive procedure:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")

(define (stream-limit stream tol)
  (let rec ((stream stream)
            (previous +inf))  ; +INF is IEEE-754 positive infinity
    (if (stream-null? stream)
        (error \"STREAM-LIMIT - stream exhausted without tolerance achieved\")
        (let ((current (stream-car stream))
              (rest (stream-cdr stream)))
          (if (&lt; (abs (- previous current)) tol)
              current
              (rec rest current))))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-3\" name=\"sec-1-5-3-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.65\">Exercise 3.65.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-3\">
<p>
This is the original sequence:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ln2-stream\">(include \"stream\")
(include \"stream-util\")

(define (ln2-summands)
  (cons-stream 1.0
               (stream-map (lambda (k)
                             (* (if (even? k) -1.0 1.0)
                                (/ 1.0 k)))
                           (integers-starting-from 2))))
(define (ln2-stream)
  (partial-sums (ln2-summands)))
</pre>
</div>

<p>
In order to accelerate the \\(\\ln{2}\\) sequence, we use the Euler transform from
this subsection:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-euler-transform\">(define (make-tableau transform s)
  (cons-stream s
               (make-tableau transform
                             (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car
              (make-tableau transform s)))

(define (square x) (* x x))
(define (euler-transform s)
  (let ((s0 (stream-ref s 0))           ; S_{n-1}
        (s1 (stream-ref s 1))           ; S_{n}
        (s2 (stream-ref s 2)))          ; S_{n+1}
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))
</pre>
</div>

<p>
We put the sequence and the transform in the same file for ease of testing:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">&lt;&lt;stream-euler-transform&gt;&gt;
&lt;&lt;ln2-stream&gt;&gt;
</pre>
</div>

<p>
With that, we can calculate the convergence of the original sequence as well as
its acceleration one and two times. As expected, the more accelerated sequences
converge much faster&#x2014;while the original sequence has not converged even after
hundreds of iterations, it only takes 10 iterations for the first accelerated
sequence to converge to the limits of floating-point accuracy, and 5 iterations
for the second accelerated sequence.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-65\")

(define orig (ln2-stream))
(define acc1 (accelerated-sequence euler-transform orig))
(define acc2 (accelerated-sequence euler-transform acc1))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-4\" name=\"sec-1-5-3-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.66\">Exercise 3.66.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-4\">
<p>
Here are the first twenty pairs:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(test (map (lambda (i) (stream-ref (pairs integers integers) i))
           (iota 20))
      '((1 1) (1 2) (2 2) (1 3) (2 3) (1 4) (3 3) (1 5) (2 4) (1 6)
        (3 4) (1 7) (2 5) (1 8) (4 4) (1 9) (2 6) (1 10) (3 5) (1 11)))
</pre>
</div>

<p>
Notice that two streams seem to be interleaved:
</p>

<ul class=\"org-ul\">
<li>A stream of pairs <code>(1 k)</code> in the second, fourth, etc. positions; i.e., where
\\(i\\) is odd (starting from \\(0\\)). More
precisely, if <code>(odd? i)</code>, <code>(stream-ref pairs-stream i)</code> is
<code>(+ 1 (quotient (- i 1) 2))</code>.
</li>
<li>A stream of pairs where all pairs that sum to \\(n\\) are generated before those
that sum to \\(n + 1\\). In these pairs, \\(i\\) decreases from \\(\\lfloor n / 2 \\rfloor\\) to \\(2\\),
since \\(i = 1\\) is already taken.
</li>
</ul>
</div>
</li>

<li><a id=\"sec-1-5-3-5\" name=\"sec-1-5-3-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.67\">Exercise 3.67.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-5\">
<p>
We proceed by induction. Consider the case where all pairs \\((S_{k < i}, T_{j})\\)
have been generated. Then the stream to generate consists of the following
three parts:
</p>

<ul class=\"org-ul\">
<li>The single element \\((S_{i}, T_{0})\\).
</li>
<li>The pairs of \\(S_{i}\\) with the rest of the elements in \\(T\\): \\((S_{i}, T_{j > 0})\\).
</li>
<li>The pairs the remaining elements of \\(S\\) with everything: \\((S_{k > i}, T_{j})\\).
</li>
</ul>

<p>
The pair \\((S_{0}, T_{0})\\) is obviously in the stream to be generated, so our
construction in fact does produce all the pairs \\((S_{i}, T_{j})\\). The Scheme
implementation below straightforwardly generates these three parts of the
stream (see the comments):
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (both-pairs s t)
  (cons-stream
   ;; (S_{i}, T_{0})
   (list (stream-car s) (stream-car t))
   (interleave
    ;; (S_{i}, T_{j &gt; 0})
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    ;; (S_{k &gt; i}, T_{j})
    (both-pairs (stream-cdr s) t))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-67\")
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-6\" name=\"sec-1-5-3-6\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.68\">Exercise 3.68.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-6\">
<p>
This does not work&#x2014;it generates the list \\((S_{i}, T_{j}), i \\leq j\\).
</p>
</div>
</li>

<li><a id=\"sec-1-5-3-7\" name=\"sec-1-5-3-7\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.69\">Exercise 3.69.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-7\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (triples s t u)
  )
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-8\" name=\"sec-1-5-3-8\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.70\">Exercise 3.70.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-8\">
<p>
Here, we want to construct a list of all pairs \\((S_{i}, T_{j})\\) just as in Exercise
3.67, but we want to make sure that instead of interleaving streams one after
the other, we interleave according to whichever stream has a first element with
a smaller weight.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (merge-weighted s1 s2 weight)
  (let recur ((s1 s1) (s2 s2))
    (cond ((stream-null? s1) s2)
          ((stream-null? s2) s1)
          (else
           (let* ((s1car (stream-car s1))
                  (s2car (stream-car s2))
                  (w (weight s1car s2car))
                  (wrev (weight s2car s1car)))
             (cond ((&lt; w wrev)
                    (cons-stream s1car (recur (stream-cdr s1) s2)))
                   ((&gt; w wrev)
                    (cons-stream s2car (recur s1 (stream-cdr s2))))
                   (else
                    (cons-stream s1car
                                 (recur (stream-cdr s1)
                                        (stream-cdr s2))))))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (weighted-pairs s t weight)
  (cons-stream
   ;; (S_{i}, T_{0})
   (list (stream-car s) (stream-car t))
   (merge-weighted
    ;; (S_{i}, T_{j &gt; 0})
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    ;; (S_{k &gt; i}, T_{j})
    (both-pairs (stream-cdr s) t)
    weight)))
</pre>
</div>

<p>
Now we can compute:
</p>

<ol class=\"org-ol\">
<li>the stream of all pairs of positive integers \\((i, j)\\) with \\((i \\leq j)\\)
   ordered according to the sum \\(i + j\\):

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-70\")

(define stream-a (weighted-pairs integers integers &lt;))
(define stream-b
  (stream-filter (lambda (p)
                   (not (apply or
                               (map (lambda (q)
                                      (= 0 (remainder p q)))
                                    '(2 3 5)))))
                 (weighted-pairs integers integers
                                 (lambda (i j)
                                   (+ (* 2 i)
                                      (* 3 j)
                                      (* 5 i j))))))
</pre>
</div>
</li>
</ol>
</div>
</li>

<li><a id=\"sec-1-5-3-9\" name=\"sec-1-5-3-9\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.71\">Exercise 3.71.</a><br  /></li>
<li><a id=\"sec-1-5-3-10\" name=\"sec-1-5-3-10\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.72\">Exercise 3.72.</a><br  /></li>
<li><a id=\"sec-1-5-3-11\" name=\"sec-1-5-3-11\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.73\">Exercise 3.73.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-11\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (integral integrand initial-value dt)
  (define int
    (cons-stream initial-value
                 (add-streams (scale-stream integrand dt)
                              int)))
  int)
</pre>
</div>


<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (RC R C dt)
  (define (circuit i v0)
    (add-streams (scale-stream i R)
                 (integral (scale-stream i (/ 1.0 C)) v0)))
  circuit)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-12\" name=\"sec-1-5-3-12\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.74\">Exercise 3.74.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-12\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define zero-crossings
  (stream-map sign-change-detector
              sense-data
              (stream-cdr sense-data)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-13\" name=\"sec-1-5-3-13\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.75\">Exercise 3.75.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-13\">
<p>
Alyssa wants to run the sign change detector on the smoothed stream. In other
words, the sign change detector should be run on two values: first, the average
of the current and last points; second, the average between the last and
previous-to-last points. However, Louis' program runs the sign change detector
between the average point and the previous, unsmoothed point. Here is the
correct version, which needs to preserve the average between the last and
previous-to-last points:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-zero-crossings input-stream last-value last-avpt)
  (let* ((current (stream-car input-stream))
         (avpt (/ (+ current last-value) 2)))
    (cons-stream
     (sign-change-detector avpt last-avpt)
     (make-zero-crossings
      (stream-cdr input-stream) current avpt))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-14\" name=\"sec-1-5-3-14\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.76\">Exercise 3.76.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-14\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (smooth input-stream)
  (define (inner input-stream last-value)
    (let* ((current (stream-car input-stream))
           (avpt (/ (+ current last-value) 2)))
      (cons-stream avpt
                   (inner (stream-cdr input-stream) current))))
  (inner input-stream 0))

(define zero-crossings
  (let ((s (smooth sense-stream)))
    (stream-map sign-change-detector
                s (cdr s))))
</pre>
</div>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-5-4\" class=\"outline-4\">
<h4 id=\"sec-1-5-4\"><span class=\"section-number-4\">1.5.4</span> <span class=\"todo TODO\">TODO</span> 3.5.4: Streams and Delayed Evaluation</h4>
<div class=\"outline-text-4\" id=\"text-1-5-4\">
</div>
<ol class=\"org-ol\"><li><a id=\"sec-1-5-4-1\" name=\"sec-1-5-4-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.77\">Exercise 3.77.</a><br  /></li>
<li><a id=\"sec-1-5-4-2\" name=\"sec-1-5-4-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.78\">Exercise 3.78.</a><br  /></li>
<li><a id=\"sec-1-5-4-3\" name=\"sec-1-5-4-3\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.79\">Exercise 3.79.</a><br  /></li>
<li><a id=\"sec-1-5-4-4\" name=\"sec-1-5-4-4\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.80\">Exercise 3.80.</a><br  /></li></ol>
</div>

<div id=\"outline-container-sec-1-5-5\" class=\"outline-4\">
<h4 id=\"sec-1-5-5\"><span class=\"section-number-4\">1.5.5</span> <span class=\"todo TODO\">TODO</span> 3.5.5: Modularity of Functional Programs and Modularity of Objects</h4>
<div class=\"outline-text-4\" id=\"text-1-5-5\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-5-5-1\" name=\"sec-1-5-5-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.81\">Exercise 3.81.</a><br  /></li>
<li><a id=\"sec-1-5-5-2\" name=\"sec-1-5-5-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.82\">Exercise 3.82.</a><br  /></li></ol>
</div>
</div>
</div>
</div>
<div id=\"postamble\" class=\"status\">
<p class=\"author\">Author: Robert Irelan</p>
<p class=\"email\">Email: <a href=\"mailto:rirelan@gmail.com\">rirelan@gmail.com</a></p>
<p class=\"date\">Created: 2015-01-19 Mon 18:46</p>
<p class=\"creator\"><a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 24.4.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</p>
<p class=\"validation\"><a href=\"http://validator.w3.org/check?uri=referer\">Validate</a></p>
</div>
</body>
</html>" #("I believe the bug is that Louis' program claims that ~last-value~ is the
computed average value from the previous iteration. However, what Alyssa
actually wants is the original value from the previous iteration. This is, I
believe, a correct version of the function:
" 0 52 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 52 53 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" org-no-flyspell t) 53 65 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" face (org-code) org-no-flyspell t font-lock-multiline t org-emphasis t) 65 66 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" org-no-flyspell t) 66 73 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 73 74 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 74 146 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 146 147 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 147 223 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 223 224 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 224 265 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3") 265 266 (yank-handler (evil-yank-line-handler) fontified t) 266 267 (yank-handler (evil-yank-line-handler) fontified t)) #("avg" 0 3 (face nil font-lock-multiline t hilit-chg hilit-chg font-lock-fontified t fontified t)) #("value" 0 5 (face nil font-lock-multiline t font-lock-fontified t fontified t)) #("current" 0 7 (face nil font-lock-multiline t font-lock-fontified t fontified t)) "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">
<head>
<title>Structure and Interpretation of Computer Programs (SICP)</title>
<!-- 2015-01-19 Mon 18:41 -->
<meta  http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />
<meta  name=\"generator\" content=\"Org-mode\" />
<meta  name=\"author\" content=\"Robert Irelan\" />
<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type=\"text/javascript\" src=\"http://orgmode.org/mathjax/MathJax.js\"></script>
<script type=\"text/javascript\">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        // Only one of the two following lines, depending on user settings
        // First allows browser-native MathML display, second forces HTML/CSS
        //  config: [\"MMLorHTML.js\"], jax: [\"input/TeX\"],
            jax: [\"input/TeX\", \"output/HTML-CSS\"],
        extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\",
                     \"TeX/noUndefined.js\"],
        tex2jax: {
            inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],
            displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"], [\"\\\\begin{displaymath}\",\"\\\\end{displaymath}\"] ],
            skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\"],
            ignoreClass: \"tex2jax_ignore\",
            processEscapes: false,
            processEnvironments: true,
            preview: \"TeX\"
        },
        showProcessingMessages: true,
        displayAlign: \"center\",
        displayIndent: \"2em\",

        \"HTML-CSS\": {
             scale: 100,
             availableFonts: [\"STIX\",\"TeX\"],
             preferredFont: \"TeX\",
             webFont: \"TeX\",
             imageFont: \"TeX\",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    \"MML\",
                 Firefox: \"MML\",
                 Opera:   \"HTML\",
                 other:   \"HTML\"
             }
        }
    });
/*]]>*///-->
</script>
</head>
<body>
<div id=\"content\">
<h1 class=\"title\">Structure and Interpretation of Computer Programs (SICP)</h1>
<div id=\"table-of-contents\">
<h2>Table of Contents</h2>
<div id=\"text-table-of-contents\">
<ul>
<li><a href=\"#sec-1\">1. <span class=\"todo TODO\">TODO</span> Chapter 3: Modularity, Objects, and State</a>
<ul>
<li><a href=\"#sec-1-1\">1.1. <span class=\"done DONE\">DONE</span> 3.1: Assignment and Local State</a>
<ul>
<li><a href=\"#sec-1-1-1\">1.1.1. <span class=\"done DONE\">DONE</span> 3.1.1: Local State Variables</a></li>
<li><a href=\"#sec-1-1-2\">1.1.2. <span class=\"done DONE\">DONE</span> 3.1.2: The Benefits of Introducing Assignment</a></li>
<li><a href=\"#sec-1-1-3\">1.1.3. <span class=\"done DONE\">DONE</span> 3.1.3: The Costs of Introducing Assignment</a></li>
</ul>
</li>
<li><a href=\"#sec-1-2\">1.2. <span class=\"done DONE\">DONE</span> 3.2: The Environment Model of Evaluation</a>
<ul>
<li><a href=\"#sec-1-2-1\">1.2.1. <span class=\"done DONE\">DONE</span> 3.2.1: The Rules for Evaluation</a></li>
<li><a href=\"#sec-1-2-2\">1.2.2. <span class=\"done DONE\">DONE</span> 3.2.2: Applying Simple Procedures</a></li>
<li><a href=\"#sec-1-2-3\">1.2.3. <span class=\"done DONE\">DONE</span> 3.2.3: Frames as the Repository of Local State</a></li>
<li><a href=\"#sec-1-2-4\">1.2.4. <span class=\"done DONE\">DONE</span> 3.2.4: Internal Definitions</a></li>
</ul>
</li>
<li><a href=\"#sec-1-3\">1.3. <span class=\"done DONE\">DONE</span> 3.3: Modeling with Mutable Data</a>
<ul>
<li><a href=\"#sec-1-3-1\">1.3.1. <span class=\"done DONE\">DONE</span> 3.3.1: Mutable List Structure</a></li>
<li><a href=\"#sec-1-3-2\">1.3.2. <span class=\"done DONE\">DONE</span> 3.3.2: Representing Queues</a></li>
<li><a href=\"#sec-1-3-3\">1.3.3. <span class=\"done DONE\">DONE</span> 3.3.3: Representing Tables</a></li>
<li><a href=\"#sec-1-3-4\">1.3.4. <span class=\"done DONE\">DONE</span> 3.3.4: A Simulator for Digital Circuits</a></li>
<li><a href=\"#sec-1-3-5\">1.3.5. <span class=\"done DONE\">DONE</span> 3.3.5: Propagation of Constraints</a></li>
</ul>
</li>
<li><a href=\"#sec-1-4\">1.4. <span class=\"todo TODO\">TODO</span> 3.4: Concurrency: Time Is of the Essence</a>
<ul>
<li><a href=\"#sec-1-4-1\">1.4.1. <span class=\"done DONE\">DONE</span> Read Section 3.4</a></li>
<li><a href=\"#sec-1-4-2\">1.4.2. <span class=\"todo TODO\">TODO</span> 3.4.1: The Nature of Time in Concurrent Systems</a></li>
<li><a href=\"#sec-1-4-3\">1.4.3. <span class=\"todo TODO\">TODO</span> 3.4.2: Mechanisms for Controlling Concurrency</a></li>
</ul>
</li>
<li><a href=\"#sec-1-5\">1.5. <span class=\"todo TODO\">TODO</span> 3.5: Streams</a>
<ul>
<li><a href=\"#sec-1-5-1\">1.5.1. <span class=\"done DONE\">DONE</span> 3.5.1: Streams Are Delayed Lists</a></li>
<li><a href=\"#sec-1-5-2\">1.5.2. <span class=\"todo TODO\">TODO</span> 3.5.2: Infinite Streams</a></li>
<li><a href=\"#sec-1-5-3\">1.5.3. <span class=\"todo TODO\">TODO</span> 3.5.3: Exploiting the Stream Paradigm</a></li>
<li><a href=\"#sec-1-5-4\">1.5.4. <span class=\"todo TODO\">TODO</span> 3.5.4: Streams and Delayed Evaluation</a></li>
<li><a href=\"#sec-1-5-5\">1.5.5. <span class=\"todo TODO\">TODO</span> 3.5.5: Modularity of Functional Programs and Modularity of Objects</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> <span class=\"todo TODO\">TODO</span> Chapter 3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-19.html#%25_chap_3\">Modularity, Objects, and State</a></h2>
<div class=\"outline-text-2\" id=\"text-1\">
</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">
<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> <span class=\"done DONE\">DONE</span> 3.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1\">Assignment and Local State</a></h3>
<div class=\"outline-text-3\" id=\"text-1-1\">
</div><div id=\"outline-container-sec-1-1-1\" class=\"outline-4\">
<h4 id=\"sec-1-1-1\"><span class=\"section-number-4\">1.1.1</span> <span class=\"done DONE\">DONE</span> 3.1.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1.1\">Local State Variables</a></h4>
<div class=\"outline-text-4\" id=\"text-1-1-1\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-1-1-1\" name=\"sec-1-1-1-1\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.1.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-accumulator initial)
  (lambda (increment)
    (set! initial (+ initial increment))
    initial))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-1\")
(define A (make-accumulator 5))
(test 15
      (A 10))
(test 25
      (A 10))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-1-2\" name=\"sec-1-1-1-2\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.2.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-monitored f)
  (define counter 0)
  (lambda (x)
    (cond ((equal? x 'how-many-calls?)
           counter)
          ((equal? x 'reset-count)
           (set! counter 0))
          (else
           (f x)
           (set! counter (+ counter 1))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-2\")
(define s (make-monitored sqrt))
(test 10
      (s 100))
(test 1
      (s 'how-many-calls?))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-1-3\" name=\"sec-1-1-1-3\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.3.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-3\">
<p>
Modify the <code>make-account</code> procedure so that it creates password-protected
accounts. That is, <code>make-account</code> should take a symbol as an additional
argument, as in
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-account balance password)
  (define (withdraw amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        \"Insufficient funds\"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (if (not (equal? p password))
        (lambda (x) \"Incorrect password\")
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error \"Unknown request -- MAKE-ACCOUNT\"
                           m)))))
  dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-3\")
(define acc (make-account 100 'secret-password))
(test 60
      ((acc 'secret-password 'withdraw) 40))
(test \"Incorrect password\"
      ((acc 'some-other-password 'deposit) 50))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-1-4\" name=\"sec-1-1-1-4\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.4.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-1-4\">
<p>
As the prompt states, there's little more work involved than to add
a <code>incorrect-password-attempts</code>, which we use to <code>call-the-cops</code> when too many
incorrect attempts in a row have been made. Ideally, a different response
would not be returned to the user when the cops have been called, but I've
decided to do so for ease of testing.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-account balance password)
  (define incorrect-password-attempts 0)
  (define (call-the-cops)
    \"Please wait -- calling the cops...\")
  (define (withdraw amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        \"Insufficient funds\"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (if (not (equal? p password))
        (lambda (x)
          (set! incorrect-password-attempts
                (+ incorrect-password-attempts 1))
          (if (&gt; incorrect-password-attempts 7)
              (call-the-cops)
              \"Incorrect password\"))
        (begin
          (set! incorrect-password-attempts 0)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                (else (error \"Unknown request -- MAKE-ACCOUNT\"
                             m))))))
  dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-4\")
(define acc (make-account 100 'secret-password))
(for-each (lambda (i)
            (test \"Incorrect password\"
                  ((acc 'some-other-password 'withdraw) 100)))
          (iota 7))
(test \"Please wait -- calling the cops...\"
      ((acc 'some-other-password 'withdraw) 100))
</pre>
</div>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-1-2\" class=\"outline-4\">
<h4 id=\"sec-1-1-2\"><span class=\"section-number-4\">1.1.2</span> <span class=\"done DONE\">DONE</span> 3.1.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1.2\">The Benefits of Introducing Assignment</a></h4>
<div class=\"outline-text-4\" id=\"text-1-1-2\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-1-2-1\" name=\"sec-1-1-2-1\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.5.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-2-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (estimate-integral P x1 x2 y1 y2 ntrial)
  ;; Number of trials for which the trial point was inside the region to be
  ;; integrated (i.e., where (= (P x y) #t)).
  (define ninside 0)
  (define (random-x)
    (random-in-range x1 x2))
  (define (random-y)
    (random-in-range y1 y2))
  (define (try x y)
    (if (P x y)
        (set! ninside (+ ninside 1))))
  (for-each (lambda (i)
              (try (random-x) (random-y)))
            (iota ntrial))
  (* (- x2 x1)
     (- y2 y1)
     (/ ninside ntrial)))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-5\")
(define (p-circle)
  (lambda (x y)
    (&gt; (* 1.0 1.0)
       (+ (* x x)
          (* y y)))))
(current-test-epsilon 0.10)
(define pi (* 4 (atan 1 1)))
(parameterize ((current-test-epsilon 0.10))
              (test pi
                    (estimate-integral (p-circle) -2.0 2.0 -2.0 2.0 100000)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-2-2\" name=\"sec-1-1-2-2\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.6.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-2-2\">
<p>
This is a fairly simple modification of the <code>rand</code> command defined in the
book. The main change is to dispatch on a <code>command</code> argument to <code>rand</code>. Also,
since the <code>reset</code> argument sets the seed of the random number generator, I
don't define a <code>random-init</code> variable here. Thus, it is necessary to make at
least one call to <code>(rand 'reset)</code> before using <code>(rand 'generate)</code> to make sure
the seed is initialized.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (rand command)
  (define x nil)                        ; Don't produce random numbers until initialized
  (cond ((equal? command 'generate)
         (set! x (rand-update x))
         x)
        ((equal? command 'reset)
         (lambda (x-init)
           (set! x x-init)))
        (else
         (error \"RAND -- bad command\")
         command)))
</pre>
</div>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-1-3\" class=\"outline-4\">
<h4 id=\"sec-1-1-3\"><span class=\"section-number-4\">1.1.3</span> <span class=\"done DONE\">DONE</span> 3.1.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%25_sec_3.1.3\">The Costs of Introducing Assignment</a></h4>
<div class=\"outline-text-4\" id=\"text-1-1-3\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-1-3-1\" name=\"sec-1-1-3-1\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.7.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-3-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-3\")
(define (make-joint account original-password new-password)
  (define (dispatch p m)
    ;; The underlying account accepts only original-password, so accept
    ;; new-password by passing original-password. Otherwise, let the underlying
    ;; account deal with error handling for a wrong password.
    (if (equal? p new-password)
        (account original-password m)
        (account p m)))
  dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-7\")
(define acc (make-account 140 'secret-password))
(define joint-acc
  (make-joint acc 'secret-password 'proxy-password))
;;; Both `acc` and `joint-acc` accept the original password, and actions on
;;; either affect the other since `joint-acc` delegates all messages to `acc`.
(test 100
      ((joint-acc 'secret-password 'withdraw) 40))
(test 60
      ((joint-acc 'secret-password 'withdraw) 40))
;;; Neither account works with an unknown password.
(test \"Incorrect password\"
      ((acc 'some-other-password 'deposit) 50))
(test \"Incorrect password\"
      ((joint-acc 'some-other-password 'deposit) 50))
;;; Original account `acc` doesn't work with the proxy password, but the joint
;;; account `joint-acc` does.
(test \"Incorrect password\"
      ((acc 'proxy-password 'withdraw) 20))
(test 40
      ((joint-acc 'proxy-password 'withdraw) 20))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-1-3-2\" name=\"sec-1-1-3-2\"></a><span class=\"done DONE\">DONE</span> <i>Exercise 3.8.</i><br  /><div class=\"outline-text-5\" id=\"text-1-1-3-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define f
  (let ((cache '()))
    (lambda (x)
      (cond ((null? x) (set! cache '())) ; Allow cache to be cleared.
            ((not (null? cache)) 0)      ; Return 0 if cache isn't clear.
            (else (set! cache x)       ; Set cache if it isn't clear already.
                  x)))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-8\")

;;; Simulate left-to-right evaluation by assigning to temporaries
(define x (f 0))
(define y (f 1))
(test 0
      (+ x y))

;;; Reset cache
(f '())

;;; Right-to-left evaluation
(define y (f 1))
(define x (f 0))
(test 1
      (+ x y))
</pre>
</div>
</div>
</li></ol>
</div>
</div>


<div id=\"outline-container-sec-1-2\" class=\"outline-3\">
<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> <span class=\"done DONE\">DONE</span> 3.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2\">The Environment Model of Evaluation</a></h3>
<div class=\"outline-text-3\" id=\"text-1-2\">
</div><div id=\"outline-container-sec-1-2-1\" class=\"outline-4\">
<h4 id=\"sec-1-2-1\"><span class=\"section-number-4\">1.2.1</span> <span class=\"done DONE\">DONE</span> 3.2.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.1\">The Rules for Evaluation</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-1\">
<p>
No exercises
</p>
</div>
</div>


<div id=\"outline-container-sec-1-2-2\" class=\"outline-4\">
<h4 id=\"sec-1-2-2\"><span class=\"section-number-4\">1.2.2</span> <span class=\"done DONE\">DONE</span> 3.2.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.2\">Applying Simple Procedures</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-2\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-2-2-1\" name=\"sec-1-2-2-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_thm_3.9\">Exercise 3.9.</a><br  /><div class=\"outline-text-5\" id=\"text-1-2-2-1\">
<p>
I don't want to draw, so I'll use Scheme S-expressions instead.
</p>

<p>
In general, each invocation of a procedure creates an environment containing a
reference to its enclosing environment and a list of references to its
parameters. The global environment is much the same except that has a nil
pointer for the enclosing environment since there is no enclosing
environment. In the below, I've represented each parameter as a list of the
symbol name and value, but the symbol name is only preserved here for ease of
following the examples &#x2013; it doesn't necessarily have to be kept in an actual
interpreter.
</p>

<p>
The recursive definition of <code>factorial</code>,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
</pre>
</div>

<p>
spawns a separate environment for each call of <code>factorial</code>, each of which has a
reference to the global environment and the value of its one argument:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define global-env `(() (factorial ,factorial-proc)
                        (fact-iter ,fact-iter-proc)
                        ,@intrinsic-defs))
(define all-envs `((,global-env (n ,6))))
(set! ,all-envs `((,global-env (n ,5)) ,all-envs))
(set! ,all-envs `((,global-env (n ,4)) ,all-envs))
(set! ,all-envs `((,global-env (n ,3)) ,all-envs))
(set! ,all-envs `((,global-env (n ,2)) ,all-envs))
(set! ,all-envs `((,global-env (n ,1)) ,all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(set! all-envs (cdr all-envs))
(assert (null? all-envs))
</pre>
</div>

<p>
In contrast, the iterative version,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (factorial n)
  (fact-iter 1 1 n))
(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
</pre>
</div>

<p>
because it is tail recursive, replaces the environment of the function from
which a tail recursive call is made with the environment for the target
function of the tail recursive call. Since all function calls in both
<code>factorial</code> and <code>fact-iter</code> are tail recursive, the list of environments
changes basically as described in the pseudocode below:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define global-env `(() (factorial ,factorial-proc)
                     (fact-iter ,fact-iter-proc)
                     ,@intrinsic-defs))
(define all-envs `((global-env (n ,6))))
(set-car! all-envs `(global-env (product ,1)
                                (counter ,1)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,1)
                                (counter ,2)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,2)
                                (counter ,3)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,6)
                                (counter ,4)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,24)
                                (counter ,5)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,120)
                                (counter ,6)
                                (max-count ,6)))
(set-car! all-envs `(global-env (product ,720)
                                (counter ,7)
                                (max-count ,6)))
(set! all-envs (cdr all-envs))
(assert (null? all-envs))
</pre>
</div>

<p>
Notice above that we've really simulated a stack, with <code>set-car!</code> performing a
mutation-in-place of the top entry of the stack.
</p>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-2-3\" class=\"outline-4\">
<h4 id=\"sec-1-2-3\"><span class=\"section-number-4\">1.2.3</span> <span class=\"done DONE\">DONE</span> 3.2.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.3\">Frames as the Repository of Local State</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-3\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-2-3-1\" name=\"sec-1-2-3-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_thm_3.10\">Exercise 3.10.</a><br  /><div class=\"outline-text-5\" id=\"text-1-2-3-1\">
<p>
The procedure to be analyzed,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
    (lambda (amount)
      (if (&gt;= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          \"Insufficient funds\"))))
</pre>
</div>

<p>
expands to the following when <code>let</code> is expanded to its underlying syntax:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-withdraw initial-amount)
  ((lambda (balance)
     (lambda (amount)
       (if (&gt;= balance amount)
           (begin (set! balance (- balance amount))
                  balance)
           \"Insufficient funds\")))
   initial-amount))
</pre>
</div>

<p>
Without TCE, the function returned by <code>make-withdraw</code> (i.e.,
<code>(lambda (amount) ⋯)</code>), has a pointer the environment of
<code>(lambda (balance) ⋯)</code>, which has a pointer to the global environment. However,
the call to <code>(lambda (balance) ⋯)</code> is in tail position, so it replaces the
environment formed by the call of <code>make-withdraw</code>. When the returned
<code>(lambda (amount) ⋯)</code> is called, it therefore has a pointer to the environment
of <code>(lambda (balance) ⋯)</code>, which points to the global environment.
</p>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-2-4\" class=\"outline-4\">
<h4 id=\"sec-1-2-4\"><span class=\"section-number-4\">1.2.4</span> <span class=\"done DONE\">DONE</span> 3.2.4: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2.4\">Internal Definitions</a></h4>
<div class=\"outline-text-4\" id=\"text-1-2-4\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-2-4-1\" name=\"sec-1-2-4-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_thm_3.11\">Exercise 3.11.</a><br  /><div class=\"outline-text-5\" id=\"text-1-2-4-1\">
<p>
The environment for <code>make-account</code> points to the global environment. In this
environment exist references to the argument <code>balance</code> as well as the local
procedures <code>withdraw</code>, <code>deposit</code>, and <code>dispatch</code>. Each local procedure points to
the environment of <code>make-account</code> (and retains references to its own arguments
as well). It's necessary to keep references to the local procedures in the
environment of <code>make-account</code> so that <code>dispatch</code> can resolve the references to
<code>withdraw</code> and <code>deposit</code> in its body. (On the other hand, it should not
strictly be necessary to retain a reference to <code>dispatch</code> since a reference to
that procedure is returned.)
</p>
</div>
</li></ol>
</div>
</div>


<div id=\"outline-container-sec-1-3\" class=\"outline-3\">
<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> <span class=\"done DONE\">DONE</span> 3.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3\">Modeling with Mutable Data</a></h3>
<div class=\"outline-text-3\" id=\"text-1-3\">
</div><div id=\"outline-container-sec-1-3-1\" class=\"outline-4\">
<h4 id=\"sec-1-3-1\"><span class=\"section-number-4\">1.3.1</span> <span class=\"done DONE\">DONE</span> 3.3.1: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.1\">Mutable List Structure</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-1\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-3-1-1\" name=\"sec-1-3-1-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.12\">Exercise 3.12.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)

;;; Nondestructive
(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))

(test z
      '(a b c d))
(test (cdr x)
      '(b))

;;; Destructive
(define w (append! x y))

(test w
      '(a b c d))
(test (cdr w)
      '(b c d))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-2\" name=\"sec-1-3-1-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.13\">Exercise 3.13.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-2\">
<p>
When a circular list is constructed from a linear list, the last cons cell in
the original list has its cdr set to the head of the original list. Thus,
<code>(null? (cdr x))</code> never returns true for any element <code>x</code> in the list and the
<code>last-pair</code> procedure loops around the list forever.
</p>
</div>
</li>

<li><a id=\"sec-1-3-1-3\" name=\"sec-1-3-1-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.14\">Exercise 3.14.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-3\">
<p>
<code>mystery</code> reverses a list destructively:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-14\">(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ((temp (cdr x)))
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
&lt;&lt;ex-3-14&gt;&gt;
(define v '(a b c d))
(define w (mystery v))
(test w
      '(d c b a))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-4\" name=\"sec-1-3-1-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.15\">Exercise 3.15.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-4\">
<p>
In Figure 3.16, modify the diagram so that the arrow pointing to the ~'a~ cell
now points to a ~'wow~ cell.
</p>

<p>
In Figure 3.17, only the arrow pointing to ~'a~ from below now points to ~'wow~
&#x2013; the arrow from above continues to point to ~'a~.
</p>
</div>
</li>

<li><a id=\"sec-1-3-1-5\" name=\"sec-1-3-1-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.16\">Exercise 3.16.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-5\">
<p>
Ben Bitdiddle's flawed procedure:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-16-count-pairs\">(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))
</pre>
</div>

<p>
We define some test data here, containing a simple list, some more complex
linked structures, and a list containing a cycle, for this and the rest of the
exercises in this section.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define pairs-3 '(a b c))
(define pairs-4
  (begin
    (define x '(a b c))
    (set-car! x (cddr x))
    x))
(define pairs-7
  (begin
    (define x '(a b c))
    (set-car! x (cdr x))
    (set-car! (cdr x) (cddr x))
    x))
(define pairs-cycle
  (begin
    (define x '(a b c))
    (set-cdr! (cddr x) x)
    x))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(test 0
      (count-pairs '()))
(test 0
      (count-pairs 'a))
(test 3
      (count-pairs pairs-3))
(test 4
      (count-pairs pairs-4))
(test 7
      (count-pairs pairs-7))
;;; No test for pairs-cycle, because a cycle causes this version of count-pairs
;;; to run forever.
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-6\" name=\"sec-1-3-1-6\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.17\">Exercise 3.17.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-6\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (count-pairs x)
  (let ((seens '()))
    (let inner ((x x))
      (if (or (not (pair? x))
              (memq x seens))
          0
          (begin
            (set! seens (cons x seens))
            (+ (inner (car x))
               (inner (cdr x))
               1))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(include \"ex-3-17-count-pairs\")
(test 0
      (count-pairs '()))
(test 0
      (count-pairs 'a))
(test 3
      (count-pairs pairs-3))
(test 4
      (count-pairs pairs-4))
(test 7
      (count-pairs pairs-7))
(test 3
      (count-pairs pairs-cycle))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-7\" name=\"sec-1-3-1-7\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.18\">Exercise 3.18.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-7\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (cycle? x)
  (let ((seens '()))
    (let inner ((x x))
      (cond ((not (pair? x)) #f)
            ((memq x seens) #t)
            (else (set! seens (cons x seens))
                  (inner (cdr x)))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(include \"ex-3-18\")
(test #f
      (cycle? '()))
(test #f
      (cycle? 'a))
(test #f
      (cycle? pairs-3))
(test #f
      (cycle? pairs-4))
(test #f
      (cycle? pairs-7))
(test #t
      (cycle? pairs-cycle))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-8\" name=\"sec-1-3-1-8\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.19\">Exercise 3.19.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-8\">
<p>
Use <a href=\"http://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare\">Floyd's cycle-finding algorithm</a>, also known as the \"tortoise-and-hare\"
algorithm. Two pointers to the list elements are kept. The \"tortoise\" is
advanced by 1 position for every call, while the \"hare\" is advanced by 2
positions. If a cycle exists, the tortoise and hare will eventually run into
other (i.e., compare equal via <code>eq?</code> after the initial call).
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (cycle? x)
  (define (cdr-safe x)
    (if (not (pair? x))
        x
        (cdr x)))
  (define (cddr-safe x)
    (if (not (pair? x))
        x
        (cdr-safe (cdr x))))
  (define (inner tortoise hare first-run)
    (cond ((any (lambda (p) (not (pair? p)))
                (list tortoise hare))
           #f)
          ((and (not first-run)
                (eq? tortoise hare))
           #t)
          (else (inner (cdr-safe tortoise)
                       (cddr-safe hare)
                       #f))))
  (inner x x #t))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"sharing-identity-test-data\")
(include \"ex-3-19\")
(test #f
      (cycle? '()))
(test #f
      (cycle? 'a))
(test #f
      (cycle? pairs-3))
(test #f
      (cycle? pairs-4))
(test #f
      (cycle? pairs-7))
(test #t
      (cycle? pairs-cycle))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-1-9\" name=\"sec-1-3-1-9\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.20\">Exercise 3.20.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-1-9\">
<p>
Given the implementation of the primitive list functions in terms of
dispatching, now including mutation,
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">;;; -d for dispatching.
(define (cons-d x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          ((eq? m 'set-car!) set-x!)
          ((eq? m 'set-cdr!) set-y!)
          (else (error \"Undefined operation -- CONS\" m))))
  dispatch)
(define (car-d z) (z 'car))
(define (cdr-d z) (z 'cdr))
(define (set-car-d! z new-value)
  ((z 'set-car!) new-value)
  z)
(define (set-cdr-d! z new-value)
  ((z 'set-cdr!) new-value)
  z)
</pre>
</div>

<p>
we can understand the environment diagram of the following code
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-20-cons-dispatch\")
(define x (cons 1 2))
(define z (cons x x))
(set-car! (cdr z) 17)
(test 17
      (car x))
</pre>
</div>

<p>
as follows:
</p>

<ul class=\"org-ul\">
<li>Every call to <code>cons-d</code> returns a <code>dispatch</code> closure which has a pointer to
the environment of the <code>cons-d</code> closure, which holds the arguments to
<code>cons-d</code>, <code>x</code> and <code>y</code>.
</li>
<li>All messages to the <code>dispatch</code> closure read or write to the environment of
the original <code>cons-d</code> call, which is preserved by the link from <code>dispatch</code>.
</li>
<li><code>x</code> and <code>y</code>, the arguments to <code>cons-d</code>, are acted upon in precisely the same
way as the <code>car</code> and <code>cdr</code> of a normal <code>cons</code> cell.
</li>
</ul>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-3-2\" class=\"outline-4\">
<h4 id=\"sec-1-3-2\"><span class=\"section-number-4\">1.3.2</span> <span class=\"done DONE\">DONE</span> 3.3.2: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.2\">Representing Queues</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error \"FRONT called with an empty queue\" queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error \"DELETE! called with an empty queue\" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-3-2-1\" name=\"sec-1-3-2-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.21\">Exercise 3.21.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-2-1\">
<p>
The standard Lisp printer recursively prints the contents of a list (or cons
cell) in order. In particular, this implementation does not treat two pointers
to the same underlying object specially. With the mutation used to implement
the queue, <code>(rear-ptr queue)</code> points to the last item in the queue, while
<code>(front-ptr queue)</code> points to the head of the list that actually stores the
items in the queue. Since the last item is in the queue list, it is printed
twice, once as an element of the list and once as a lone item. (As an aside, it
appears that the queue is keeping the last item alive longer than necessary
through the pointer <code>rear-ptr</code> after the queue is empty. The implementation
should set <code>rear-ptr</code> to nil (or some other small, primitive, immutable value)
to fix this.)
</p>

<p>
Since <code>front-ptr</code> returns a pointer to the list that represents the queue, all
we need to do to print the queue properly is print that list:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (print-queue q)
  (display (front-ptr q)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-2-2\" name=\"sec-1-3-2-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.22\">Exercise 3.22.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-2-2\">
<p>
A straightforward implementation uses the same approach as implementing cons
cells using dispatch &#x2013; the arguments to the constructor, retained by the
<code>dispatch</code> closure, are manipulated by subprocedures in <code>dispatch</code> in the same
way as the car and cdr of the cons cell we use to implement the queue above.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-queue-d)
  (let ((front-ptr '())
        (rear-ptr '()))
    ;; Some of these procedures are defined to return a reference to the queue
    ;; on which the procedure was invoked. For consistency, we define all these
    ;; procedures to take `queue`.
    (define (set-front-ptr! queue item) (set! front-ptr item))
    (define (set-rear-ptr! queue item) (set! rear-ptr item))
    (define (empty-queue? queue) (null? front-ptr))
    (define (front-queue queue)
      (if (empty-queue? queue)
          (error \"FRONT called with an empty queue\" queue)
          (car front-ptr)))
    (define (insert-queue! queue item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue? queue)
               (set-front-ptr! queue new-pair)
               (set-rear-ptr! queue new-pair)
               queue)
              (else
               (set-cdr! rear-ptr new-pair)
               (set-rear-ptr! queue new-pair)
               queue))))
    (define (delete-queue! queue)
      (cond ((empty-queue? queue)
             (error \"DELETE! called with an empty queue\" queue))
            (else
             (set-front-ptr! queue (cdr front-ptr))
             ;; If the queue becomes empty, clear `rear-ptr` to avoid
             ;; unnecessarily retaining a reference to it.
             (when (null? front-ptr)
                   (set-rear-ptr! queue '()))
             queue)))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'set-front-ptr!)
             (lambda (item) (set-front-ptr! dispatch item)))
            ((eq? m 'set-rear-ptr!)
             (lambda (item) (set-rear-ptr! dispatch item)))
            ((eq? m 'empty-queue?)
             (empty-queue? dispatch))
            ((eq? m 'front-queue)
             (front-queue dispatch))
            ((eq? m 'insert-queue!)
             (lambda (item) (insert-queue! dispatch item)))
            ((eq? m 'delete-queue!)
             (delete-queue! dispatch))
            (else
             error \"Undefined operation - QUEUE\" m)))
    dispatch))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-22-queue-dispatch\")
(define q (make-queue-d))
((q 'insert-queue!) 0)
(test 0
      (q 'front-queue))
((q 'insert-queue!) 1)
((q 'insert-queue!) 2)
(test 2
      (car (q 'rear-ptr)))
(q 'delete-queue!)
(test 1
      (q 'front-queue))
(q 'delete-queue!)
(q 'delete-queue!)
(test #t
      (q 'empty-queue?))
(test #t
      (null? (q 'rear-ptr)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-2-3\" name=\"sec-1-3-2-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.23\">Exercise 3.23.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-2-3\">
<p>
Represent as doubly-linked list. Will need selectors for DLL:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-deque)
  (let ((header (cons '() '())))
    ;; Internal procedures on internal representation of deque.
    (define (make-node item prev next)
      (cons (cons item prev) next))
    (define (front) (car header))
    (define (rear) (cdr header))
    (define (set-front! node) (set-car! header node))
    (define (set-rear! node) (set-cdr! header node))
    (define (item node) (caar node))
    (define (prev node) (cdar node))
    (define (next node) (cdr node))
    (define (set-prev! this that) (set-cdr! (car this) that))
    (define (set-next! this that) (set-cdr! this that))

    ;; Exported procedures
    (define (empty? self)
      (eq? (front) '()))
    (define (front-deque self)
      (item (front)))
    (define (rear-deque self)
      (item (rear)))
    (define (front-insert! self item)
      (set-front! (make-node item '() (front))))
    (define (rear-insert! self item)
      (set-rear! (make-node item (rear) '())))
    (define (front-delete! self)
      (set-front! (next (front))))
    (define (rear-delete! self)
      (set-rear! (prev (rear))))

    (define (dispatch m)
      (cond ((eq? m 'empty?) (empty? header))
            ((eq? m 'front-deque) (front-deque header))
            ((eq? m 'rear-deque) (rear-deque header))
            ((eq? m 'front-insert!) (front-insert! header item))
            ((eq? m 'rear-insert!) (rear-insert! header item))
            ((eq? m 'front-delete!) (front-delete! header))
            ((eq? m 'rear-delete!) (rear-delete! header))
            (else (error \"Undefined operation -- DEQUE\" m))))
    dispatch))
</pre>
</div>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-3-3\" class=\"outline-4\">
<h4 id=\"sec-1-3-3\"><span class=\"section-number-4\">1.3.3</span> <span class=\"done DONE\">DONE</span> 3.3.3: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.3\">Representing Tables</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-3\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-3-3-1\" name=\"sec-1-3-3-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.24\">Exercise 3.24.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-table same-key?)
  (let ((tbl (cons '*table* '())))
    ;; Internal procedure
    (define (assoc key records)
      (cond ((null? records) #f)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    ;; Exported procedures
    (define (lookup key)
      (let ((record (assoc key (cdr tbl))))
        (if record
            (cdr record)
            #f)))
    (define (insert! key value)
      (let ((record (assoc key (cdr tbl))))
        (if record
            (set! (cdr record) value)
            (set! (cdr tbl) (cons (cons key value) (cdr tbl))))))
    ;; Dispatch
    (define (dispatch msg)
      (cond ((equal? msg 'lookup) lookup)
            ((equal? msg 'insert!) insert!)
            (else (error \"TABLE -- unknown message\")))))
    dispatch)
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-24\")
(use test)

(define tbl-exact (make-table (lambda (x y) (equal? x y))))
(test #f
      ((tbl-exact 'lookup) 'foo))

((tbl-exact 'insert!) 'a 1)
((tbl-exact 'insert!) 'b 2)
((tbl-exact 'insert!) 'c 3)
(test 1
      ((tbl-exact 'lookup) 'a))
(test 2
      ((tbl-exact 'lookup) 'b))
(test 3
      ((tbl-exact 'lookup) 'c))

(define tbl-inexact (make-table (lambda (x y)
                                  (&lt; (abs (- x y)) .1))))
(test #f
      ((tbl-inexact 'lookup) 'foo))
((tbl-inexact 'insert!) 1.0 'x)
(test 'x
      ((tbl-inexact 'lookup) 1.05))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-3-2\" name=\"sec-1-3-3-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.25\">Exercise 3.25.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-table same-key?)
  (let ((tbl (cons '*table* '())))
    (define (assoc key records)
      (cond ((null? records) #f)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup keys)
      (let recur ((elems (cdr tbl))
                  (keys keys))
        (let ((record (assoc (car keys) elems)))
          (if record
              (cond
               ;; If the current key maps to a list, there must be more keys to
               ;; continue the search.
               ((and (pair? (cdr keys)) (pair? (cdr record)))
                (recur (cdr record) (cdr keys)))
               ;; Ensure that e.g. `(lookup '(a b))` does not succeed if
               ;; `(lookup '(a))` does not return a list.
               ((null? (cdr keys))
                (cdr record))
               (else #f))
              #f))))
    (define (insert! keys value)
      (when (null? keys)
            (error \"INSERT! -- keys cannot be empty\"))
      (let recur ((header tbl)
                  (keys keys))
        (define (recursively-insert record)
          (if (null? (cdr keys))
              (set! (cdr record) value)
              (begin
                ;; Obliterate any non-list associated with the current key,
                ;; since it will need to be replaced.
                (when (not (pair? (cdr record)))
                      (set! (cdr record) '()))
                (recur record (cdr keys)))))
        (let ((record (assoc (car keys) (cdr header))))
          (if (pair? record)
              (recursively-insert record)
              (let ((inserted (if record
                                  record
                                  (cons (car keys) '()))))
                (when (not record)
                      (set! (cdr header) (cons inserted (cdr header))))
                (recursively-insert inserted))))))
    (define (dispatch msg)
      (cond ((equal? msg 'lookup) lookup)
            ((equal? msg 'insert!) insert!)
            (else (error \"TABLE -- unknown message\"))))
    dispatch))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-25\")
(use test)

(define (lookup tbl keys)
  ((tbl 'lookup) keys))
(define (insert! tbl keys value)
  ((tbl 'insert!) keys value))
(define tbl (make-table equal?))
(test #f
      (lookup tbl '(a)))
(test #f
      (lookup tbl '(0 1 2)))

(insert! tbl '(a) 'foo)
(insert! tbl '(0 1 2) 'bar)
(test 'foo
      (lookup tbl '(a)))
(test #f
      (lookup tbl '(a b)))
(test 'bar
      (lookup tbl '(0 1 2)))
(test #t
      (pair? (lookup tbl '(0))))

(insert! tbl '(a b) 'baz)
(test 'baz
      (lookup tbl '(a b)))
(test #t
      (pair? (lookup tbl '(a))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-3-3\" name=\"sec-1-3-3-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.26\">Exercise 3.26.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-3\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-table cmp)
  (let ((tbl (cons '*table* '())))
    ;; Accessor functions
    (define (key node) (caar node))
    (define (value node) (cdar node))
    (define (left node) (cadr node))
    (define (right node) (cddr node))
    (define (set-value! node v) (set-cdr! (car node) v))
    (define (set-left! node n) (set-car! (cdr node) n))
    (define (set-right! node n) (set-cdr! (cdr node) n))
    (define (make-node k v) (cons #|payload|#  (cons k v)
                                  #|children|# (cons '() '())))

    (define (lookup k)
      (let recur ((node (cdr tbl)))
        (cond ((null? node) #f)
              ((&lt; (cmp k (key node)) 0) (recur (left node)))
              ((&gt; (cmp k (key node)) 0) (recur (right node)))
              (else (value node)))))
    (define (insert! k v)
      (set! (cdr tbl)
            (let recur ((node (cdr tbl)))
              (cond ((null? node) (make-node k v))
                    ((&lt; (cmp k (key node)) 0)
                     (set-left! node (recur (left node)))
                     node)
                    ((&gt; (cmp k (key node)) 0)
                     (set-right! node (recur (right node)))
                     node)
                    (else (set-value! node v)
                          node)))))
    (define (dispatch msg)
      (cond ((equal? msg 'lookup) lookup)
            ((equal? msg 'insert!) insert!)
            (else (error \"TABLE -- unknown message\"))))
    dispatch))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-26\")
(use test)

(define (lookup tbl key)
  ((tbl 'lookup) key))
(define (insert! tbl key value)
  ((tbl 'insert!) key value))
(define tbl (make-table (lambda (x y)
                          (cond ((&lt; x y) -1)
                                ((&gt; x y) 1)
                                (else 0)))))

(test #f
      (lookup tbl 0))
(insert! tbl 0 'foo)
(test 'foo
      (lookup tbl 0))
(test #f
      (lookup tbl 1))
(insert! tbl -3 'bar)
(test 'foo
      (lookup tbl 0))
(test 'bar
      (lookup tbl -3))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-3-4\" name=\"sec-1-3-3-4\"></a><span class=\"todo HOLD\">HOLD</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.27\">Exercise 3.27.</a>&#xa0;&#xa0;&#xa0;<span class=\"tag\"><span class=\"HOLD\">HOLD</span></span><br  /><div class=\"outline-text-5\" id=\"text-1-3-3-4\">
<ul class=\"org-ul\">
<li>State \"HOLD\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2015-01-18 Sun 19:09]</span></span>
</li>
</ul>

<p>
Ehh&#x2026;
</p>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-3-4\" class=\"outline-4\">
<h4 id=\"sec-1-3-4\"><span class=\"section-number-4\">1.3.4</span> <span class=\"done DONE\">DONE</span> 3.3.4: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.4\">A Simulator for Digital Circuits</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-4\">
<p>
Some common procedures, most copied from the book.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"logic-gates-agenda\")

(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error \"Unknown operation -- WIRE\" m))))
    dispatch))
(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin
        ((car procedures))
        (call-each (cdr procedures)))))
(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-probe log)
  (define (probe name wire)
    (add-action! wire
                 (lambda ()
                   (cons (list name
                               (current-time the-agenda)
                               (get-signal wire))
                         log))))
  probe)
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-3-4-1\" name=\"sec-1-3-4-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.28\">Exercise 3.28.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-28-or-gate\">(define (or-gate a1 a2 output)
  (define (logical-or s1 s2)
    (define (signal-valid s)
      (or (= s 0) (= s 1)))
    (cond ((not (signal-valid s1)) (error \"Invalid signal on a1\" s1))
          ((not (signal-valid s2)) (error \"Invalid signal on a2\" s2))
          ((and (= s1 0) (= s2 0)) 0)
          ((and (= s1 1) (= s2 0)) 1)
          ((and (= s1 0) (= s2 1)) 1)
          ((and (= s1 1) (= s2 1)) 1)
          (else (error \"Unreachable\"))))
  (define (or-action-procedure)
    (let ((new-value
           (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-4-2\" name=\"sec-1-3-4-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.29\">Exercise 3.29.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-2\">
<p>
We use this result from De Morgan's laws
</p>

\\begin{equation*}
a \\vee b = \\neg \\left( \\neg a \\wedge \\neg b \\right)
\\end{equation*}

<p>
to implement the or-gate in terms of and-gates and inverters:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (or-gate a1 a2 output)
  (let ((na (make-wire)) (nb (make-wire))
        (c (make-wire)))
    (inverter a na)
    (inverter b nb)
    (and-gate na nb c)
    (inverter c output)
    'ok))
</pre>
</div>

<p>
This construction is simpler than the primitive and-gate constructed
above. However, its propagation times are more complex &#x2013; the formula for the
total propagation time \\(t_{\\mathrm{total}}\\), where \\(t_{x}\\) is the
propagation delay due to the gate that begins the wire \\(x\\), is
</p>

\\begin{equation*}
t_{\\mathrm{total}} = \\t_{output} + \\t_{c} + \\max{(na, nb)}
\\end{equation*}

<p>
This may be a larger delay than that of the primitive or-gate if the primitive
gate can be manufactured to have a delay similar to that of the and-gate, for
example. On the other hand, if the composition of inverters and and-gates has
enough of an advantage, such as individual speed or cost, over a single
primitive or-gate or-gate for whatever reason, the composed or-gate may still
be preferable.
</p>
</div>
</li>

<li><a id=\"sec-1-3-4-3\" name=\"sec-1-3-4-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.30\">Exercise 3.30.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-3\">
<p>
Straightforward implementation of the diagram:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (ripple-carry-adder as bs ss carry)
  (let ((cs
         ;; Construct the n internal wires needed to link the full-adders
         ;; internally and verify that as, bs, and ss all have the same length.
         (let make-cs ((as as) (bs bs) (ss ss) (cs '()))
              (cond ((and (null? as) (null? bs) (null? ss)) cs)
                    ((null? as) (error \"Too few bits in as\"))
                    ((null? bs) (error \"Too few bits in bs\"))
                    ((null? ss) (error \"Too few bits in ss\"))
                    (else (make-cs (cdr as) (cdr bs) (cdr ss)
                                 (cons (make-wire) cs)))))))
    (let make-adder ((as as) (bs bs) (cs cs) (ss ss) (carry carry))
      (cond ((null? as) 'ok)  ; Only test `as` since all lists have same length.
          (else (full-adder (car as) (car bs) (car cs) (car ss) carry)
                (make-adder (cdr as) (cdr bs) (cdr cs) (cdr ss) (car cs)))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"ex-3-30\")
(use test)
</pre>
</div>

<p>
The delay is troublesome &#x2013; \\(n \\mathrm{delay}_{\\mathrm{full-adder}}\\).
</p>
</div>
</li>

<li><a id=\"sec-1-3-4-4\" name=\"sec-1-3-4-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.31\">Exercise 3.31.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-4\">
<p>
If the procedure is merely added without executing it, the state of the circuit
can become inconsistent until the first change to the inputs is made. For
example, consider the execution of <code>(half-adder a b s c)</code>, with <code>a</code> and <code>b</code>
initially <code>1</code> and <code>s</code> and <code>c</code> initially <code>0</code>. Without the argument <code>proc</code> being
called immediately on the call to <code>accept-action-procedure!</code>, no calls to
<code>set-my-signal!</code>, which is the only means now to call any of the
<code>action-procedures</code>, are made, so <code>s</code> and <code>c</code> remain set to <code>0</code> until the first
input is set.
</p>
</div>
</li>

<li><a id=\"sec-1-3-4-5\" name=\"sec-1-3-4-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.32\">Exercise 3.32.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-4-5\">
<p>
It is necessary to execute the events in the same queue (i.e., those that take
place \"at the same time\") in FIFO order because it is in fact the case that the
and-gate observes the change to <code>a1</code> while it is scheduling <code>a2</code>.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"FIFO-agenda\">(define agenda
  '((0 ((lambda () (set-a1! 0))
        (lambda () (set-a2! 1))))
    ;; Stable value of and-gate output after initialization.
    (5 ((lambda () (assert-output 0))))
    ;; Change a1 and a2 simultaneously.
    (10 ((lambda () (set-a1! 1))
         (lambda () (set-a2! 0))))
    (13 ((lambda ()
           ;; Lexical capture of new-value at t = 10 after setting just a1.
           (set-output! 1))
         (lambda ()
           ;; Lexical capture of new-value at t = 10 after setting a1 followed
           ;; by a2.
           (set-output! 0))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"LIFO-agenda\">(define agenda
  '((0 ((lambda () (set-a1! 0))
        (lambda () (set-a2! 1))))
    ;; Stable value of and-gate output after initialization.
    (5 ((lambda () (assert-output 0))))
    ;; Change a1 and a2 simultaneously.
    (10 ((lambda () (set-a1! 1))
         (lambda () (set-a2! 0))))
    (13 ((lambda ()
           ;; Lexical capture of new-value at t = 10 after setting a1 followed
           ;; by a2.
           (set-output! 0))
         (lambda ()
           ;; Lexical capture of new-value at t = 10 after setting just a1.
           ;; THIS IS THE INCORRECT RESULT.
           (set-output! 1))))))
</pre>
</div>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-3-5\" class=\"outline-4\">
<h4 id=\"sec-1-3-5\"><span class=\"section-number-4\">1.3.5</span> <span class=\"done DONE\">DONE</span> 3.3.5: <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_sec_3.3.4\">Propagation of Constraints</a></h4>
<div class=\"outline-text-4\" id=\"text-1-3-5\">
<p>
Implementation of constraint objects from book. Includes the primitive
procedures
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">;;; Primitive connector construction
(define (make-connector)
  (let ((value #f) (informant #f) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (error \"Contradiction\" (list value newval)))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant #f)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints
                (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant #t #f))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (error \"Unknown operation -- CONNECTOR\"
                         request))))
    me))

;;; Convenience procedures for make-connector.
(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))
(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))
</pre>
</div>

<p>
and some commonly used constraints, implemented in terms of the primitives:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"constraint-primitive\")

;;; Adder constraint between summands and sum
(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- ADDER\" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

;;; Multiplier constraint between multiplicands and product.
(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- MULTIPLIER\" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

;;; Constrain connector to a constant
(define (constant value connector)
  (define (me request)
    (error \"Unknown request -- CONSTANT\" request))
  (connect connector me)
  (set-value! connector value me)
  me)

;;; Print a message about setting or unsetting of a connector (e.g., for
;;; testing).
(define (probe name connector)
  (define (print-probe value)
    (display \"Probe: \")
    (display name)
    (display \" = \")
    (display value)
    (newline))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe \"?\"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- PROBE\" request))))
  (connect connector me)
  me)
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-3-5-1\" name=\"sec-1-3-5-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.33\">Exercise 3.33.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-1\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (averager a b c)
  (let ((half (make-connector))
        (sum (make-connector)))
    (constant 0.5 half)
    (adder a b sum)
    (multiplier half sum c)
    'ok))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-5-2\" name=\"sec-1-3-5-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.34\">Exercise 3.34.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-2\">
<p>
The procedure suggested by Louis won't work when propagation from the
product to the multiplicands is needed. <code>multiplier</code> needs at least two of
<code>m1</code>, <code>m2</code>, and <code>product</code> to be set in order to propagate the constraint from
the set values to the unset value. However, if one of the multiplicands is
unset, both are, a situation that <code>multiplier</code> can't handle.
</p>
</div>
</li>

<li><a id=\"sec-1-3-5-3\" name=\"sec-1-3-5-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.35\">Exercise 3.35.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-3\">
<p>
Straightforward implementation based on <code>multiplier</code>:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (&lt; (get-value b) 0)
            (error \"square less than 0 -- SQUARER\" (get-value b))
            (set-value! a (sqrt b)))
        (let ((aval (get-value a)))
          (set-value! b (* aval aval))))
  (define (process-forget-value)
    (forget-value! b me)
    (forget-value! a me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error \"Unknown request -- SQUARER\" request))))
  (connect a me)
  (connect b me)
  me)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-3-5-4\" name=\"sec-1-3-5-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.36\">Exercise 3.36.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-4\">
<p>
Do in class.
</p>
</div>
</li>

<li><a id=\"sec-1-3-5-5\" name=\"sec-1-3-5-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%25_thm_3.37\">Exercise 3.37.</a><br  /><div class=\"outline-text-5\" id=\"text-1-3-5-5\">
<p>
The expression-oriented constraint adder is defined thus in the book:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"constraint-adder-expression\">(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
</pre>
</div>

<p>
We define similar procedures for subtraction, multiplication, division, and
constant values:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"constraint-common\")

&lt;&lt;constraint-adder-expression&gt;&gt;

;;; Constant
(define (cv x)
  (let ((z (make-connector)))
    (constant x z)
    z))

;;; Subtraction
(define (c- x y)
  ;; $x - y = z \\Rightarrow x = y + z$ to avoid having to introduce an
  ;; additional multiplier and constant constraint.
  (let ((z (make-connector)))
    (adder y z x)
    z))

;;; Multiplication
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))

;;; Division
(define (c/ x y)
  ;; $x / y = z \\Rightarrow x = y * z$ to avoid having to implement division as
  ;; a primitive constraint. Pray that $y \\neq 0$.
  (let ((z (make-connector)))
    (multiplier y z x)
    z))
</pre>
</div>
</div>
</li></ol>
</div>
</div>


<div id=\"outline-container-sec-1-4\" class=\"outline-3\">
<h3 id=\"sec-1-4\"><span class=\"section-number-3\">1.4</span> <span class=\"todo TODO\">TODO</span> 3.4: Concurrency: Time Is of the Essence</h3>
<div class=\"outline-text-3\" id=\"text-1-4\">
</div><div id=\"outline-container-sec-1-4-1\" class=\"outline-4\">
<h4 id=\"sec-1-4-1\"><span class=\"section-number-4\">1.4.1</span> <span class=\"done DONE\">DONE</span> Read Section 3.4</h4>
<div class=\"outline-text-4\" id=\"text-1-4-1\">
<ul class=\"org-ul\">
<li>State \"DONE\"       from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 15:07]</span></span>
</li>
</ul>
<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 14:42]</span></span>
</li>
</ul>
<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>
</div>

<div id=\"outline-container-sec-1-4-2\" class=\"outline-4\">
<h4 id=\"sec-1-4-2\"><span class=\"section-number-4\">1.4.2</span> <span class=\"todo TODO\">TODO</span> 3.4.1: The Nature of Time in Concurrent Systems</h4>
<div class=\"outline-text-4\" id=\"text-1-4-2\">
<p>
Complexity of concurrent systems comes from:
</p>

<ul class=\"org-ul\">
<li>Dependence of ordering of events in a system with mutation.
</li>
<li>Reduced ability to control ordering of events, and difficulty in mentally
taking this into account.
</li>
</ul>

<p>
Concurrency models:
</p>

<ul class=\"org-ul\">
<li>No two operations on any shared state variable can occur at the same
time. Too strict for most uses (for example, implies that only one
transaction can occur at a time in a bank system).
</li>
<li>System must proceed as if events had been executed sequentially in <i>some</i>
  order (not guaranteed what order is used).
<ul class=\"org-ul\">
<li>There can still be more than one \"correct\" answer &#x2013; may need to restrict
some parts of the program further depending on requirements.

<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 16:41]</span></span> <br  />
</li>
<li>State \"STARTED\"    from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 14:26]</span></span>
     Want SRFI-18 to support concurrency.
</li>
</ul>
<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</li>
</ul>
</li>
</ul>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-4-2-1\" name=\"sec-1-4-2-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.38\">Exercise 3.38.</a><br  /><div class=\"outline-text-5\" id=\"text-1-4-2-1\">
<ol class=\"org-ol\">
<li>There are 6 combinations of Peter (A), Paul (B), and Mary (C):

<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">


<colgroup>
<col  class=\"left\" />

<col  class=\"right\" />
</colgroup>
<thead>
<tr>
<th scope=\"col\" class=\"left\">Order</th>
<th scope=\"col\" class=\"right\">Final amount</th>
</tr>
</thead>
<tbody>
<tr>
<td class=\"left\">(A, B, C)</td>
<td class=\"right\">45</td>
</tr>

<tr>
<td class=\"left\">(A, C, B)</td>
<td class=\"right\">35</td>
</tr>

<tr>
<td class=\"left\">(B, A, C)</td>
<td class=\"right\">45</td>
</tr>

<tr>
<td class=\"left\">(B, C, A)</td>
<td class=\"right\">50</td>
</tr>

<tr>
<td class=\"left\">(C, A, B)</td>
<td class=\"right\">40</td>
</tr>

<tr>
<td class=\"left\">(C, B, A)</td>
<td class=\"right\">40</td>
</tr>
</tbody>
</table>
</li>

<li>For transactions A and B, there are 3 steps:

<ul class=\"org-ul\">
<li>Read the current balance from the shared account [Xr].
</li>
<li>Perform the calculation.
</li>
<li>Write the new balance to the shared account [Xw].
</li>
</ul>
<p>
However, transaction C reads the shared variable <code>balance</code> twice, so there
are 5 steps:
</p>

<ul class=\"org-ul\">
<li>Read the current balance from the shared account [Cr1].
</li>
<li>Perform the division.
</li>
<li>Read the current balance from the shared account [Cr2].
</li>
<li>Perform the subtraction.
</li>
<li>Write the new balance to the shared account [Cw].
</li>
</ul>
<p>
The calculations don't modify a shared variable, so the relevant
combinations for each transaction are combinations of Ar, Aw, Br, Bw, Cr1,
Cr2, and Cw, with the constraint that \\(t(Ar) \\leq t(Aw)\\),
\\(t(Br) \\leq t(Bw)\\), and \\(t(Cr1) \\leq t(Cr2) \\leq t(Cw)\\) or
\\(t(Cr2) \\leq t(Cr1) \\leq t(Cw)\\).
</p>
</li>
</ol>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-4-3\" class=\"outline-4\">
<h4 id=\"sec-1-4-3\"><span class=\"section-number-4\">1.4.3</span> <span class=\"todo TODO\">TODO</span> 3.4.2: Mechanisms for Controlling Concurrency</h4>
<div class=\"outline-text-4\" id=\"text-1-4-3\">
<p>
There are too many possible orderings of concurrent processes to ensure a
single answer or to analyze in many cases.
</p>

<p>
Serializer:
</p>
<ul class=\"org-ul\">
<li>Ensures that only one procedure under the control of the serializer can be
executed at a time.
</li>
<li>Example: In the below, <code>foo</code> and <code>bar</code> are guaranteed to not execute at the
same time (i.e., their execution is <i>serialized</i>).

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define s (make-serializer))
(parallel-execute (s (foo))
                  (s (bar)))
</pre>
</div>
</li>

<li>Implemented in terms of <i>mutexes</i>.
</li>
<li>Mutex implemented as a spin lock using a test-and-set instruction.
</li>
</ul>

<p>
Here's an implementation of the threading tools <code>parallel-execute</code> and
<code>make-serializer</code> using SRFI-18 mutexes and threads:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use srfi-18)

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex-lock! mutex)
        (let ((val (apply p args)))
          (mutex-unlock! mutex)
          val))
      serialized-p)))

(define (parallel-execute . fs)
  (let ((ts (map make-thread fs)))
    (for-each thread-start! ts)
    (for-each thread-join! ts)
    '()))
</pre>
</div>

<ul class=\"org-ul\">
<li>State \"HOLD\"       from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-12-10 Wed 19:54]</span></span> <br  />
     Do at some point
</li>
</ul>
<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"STARTED\"    <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 17:31]</span></span> <br  />
     Implemented those two functions.
</li>
</ul>
<ul class=\"org-ul\">
<li>State \"STARTED\"    from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat 17:11]</span></span>
</li>
</ul>
<p>
Need to implement <code>make-serializer</code> and perhaps <code>parallel-execute</code>.
</p>
<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-4-3-1\" name=\"sec-1-4-3-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.39\">Exercise 3.39.</a><br  /></li>
<li><a id=\"sec-1-4-3-2\" name=\"sec-1-4-3-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.40\">Exercise 3.40.</a><br  /></li>
<li><a id=\"sec-1-4-3-3\" name=\"sec-1-4-3-3\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.41\">Exercise 3.41.</a><br  /></li>
<li><a id=\"sec-1-4-3-4\" name=\"sec-1-4-3-4\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.42\">Exercise 3.42.</a><br  /></li>
<li><a id=\"sec-1-4-3-5\" name=\"sec-1-4-3-5\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.43\">Exercise 3.43.</a><br  /></li>
<li><a id=\"sec-1-4-3-6\" name=\"sec-1-4-3-6\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.44\">Exercise 3.44.</a><br  /></li>
<li><a id=\"sec-1-4-3-7\" name=\"sec-1-4-3-7\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.45\">Exercise 3.45.</a><br  /></li>
<li><a id=\"sec-1-4-3-8\" name=\"sec-1-4-3-8\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.46\">Exercise 3.46.</a><br  /></li>
<li><a id=\"sec-1-4-3-9\" name=\"sec-1-4-3-9\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.47\">Exercise 3.47.</a><br  /></li>
<li><a id=\"sec-1-4-3-10\" name=\"sec-1-4-3-10\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.48\">Exercise 3.48.</a><br  /></li>
<li><a id=\"sec-1-4-3-11\" name=\"sec-1-4-3-11\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-23.html#%25_thm_3.49\">Exercise 3.49.</a><br  /></li></ol>
</div>
</div>

<div id=\"outline-container-sec-1-5\" class=\"outline-3\">
<h3 id=\"sec-1-5\"><span class=\"section-number-3\">1.5</span> <span class=\"todo TODO\">TODO</span> 3.5: Streams</h3>
<div class=\"outline-text-3\" id=\"text-1-5\">
<p>
Basic stream procedures used throughout the section.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">&lt;&lt;stream-primitives&gt;&gt;
&lt;&lt;stream-fold&gt;&gt;

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
&lt;&lt;stream-map-poly&gt;&gt;
(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))
(define (stream-filter proc s)
  (cond ((stream-null? s) the-empty-stream)
        ((proc (stream-car s))
         (cons-stream (stream-car s)
                      (stream-filter proc (stream-cdr s))))
        (else
         (stream-filter proc (stream-cdr s)))))
(define (display-line x)
  (newline)
  (display x))
(define (display-stream s)
  (stream-for-each display-line s))
(define (stream-enumerate-interval low high)
  (if (&gt; low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))
</pre>
</div>

<p>
We start with the primitive procedures on the stream data type:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-primitives\">(define the-empty-stream 'the-empty-stream)
(define (stream-null? s) (eq? s the-empty-stream))
(define-syntax cons-stream
  (syntax-rules ()
    ((cons-stream a b)
     (cons a (delay b)))))
(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))
</pre>
</div>

<p>
Another very useful and generally-applicable stream function is <code>fold</code>. In
fact, both <code>map</code> and <code>filter</code> can be implemented in terms of <code>fold</code>:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-fold\">(define (stream-fold kons knil . streams)
  (if (or (map stream-null? streams))
      knil
      (cons-stream (apply kons (append (map stream-car streams)
                                       knil))
                   (apply stream-fold kons knil (map stream-cdr streams)))))
</pre>
</div>
</div>

<div id=\"outline-container-sec-1-5-1\" class=\"outline-4\">
<h4 id=\"sec-1-5-1\"><span class=\"section-number-4\">1.5.1</span> <span class=\"done DONE\">DONE</span> 3.5.1: Streams Are Delayed Lists</h4>
<div class=\"outline-text-4\" id=\"text-1-5-1\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-5-1-1\" name=\"sec-1-5-1-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.50\">Exercise 3.50.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-1-1\">
<p>
The <code>apply</code> procedure can be used to call a function with arguments drawn from
a list, and we can iterate along the argument streams in turn (which are all
assumed to be of the same length):
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-map-poly\">(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (map stream-car argstreams))
       (apply stream-map
              (cons proc (map stream-cdr argstreams))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(use test)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-1-2\" name=\"sec-1-5-1-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.51\">Exercise 3.51.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-1-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(define (show x) (display-line x) x)
(define x (stream-map show (stream-enumerate-interval 0 10)))
(stream-ref x 5)
(stream-ref x 7)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-1-3\" name=\"sec-1-5-1-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.52\">Exercise 3.52.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-1-3\">
<p>
We have these definitions, which in particular include a mutating procedure
<code>accum</code>:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(use test)
(define sum 0)
(define (accum x)
  (set! sum (+ x sum))
  sum)
(define seq (stream-map accum (stream-enumerate-interval 1 20)))
(define y (stream-filter even? seq))
(define z (stream-filter (lambda (x) (= (remainder x 5) 0))
                         seq))

&lt;&lt;ex-3-52-eval-y&gt;&gt;
&lt;&lt;ex-3-52-eval-z&gt;&gt;
</pre>
</div>

<p>
First, we obtain the 7<sup>th</sup> element of <code>y</code>, which is the 14<sup>th</sup> element of <code>seq</code>,
obtaining the expected result of \\( \\sum_{i=1}^{14} i = 136 \\):
</p>
<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-52-eval-y\">(stream-ref y 7)
(test 136
      sum)
</pre>
</div>

<p>
Next, we look at <code>z</code>, which should contain only those entries of <code>seq</code>
divisible by <code>5</code>. Since \\( \\sum_{i=1}^{n} i = \\frac{n(n + 1)}{2} \\), we expect
that both every \\(i\\)<sup>th</sup> entry and \\(i-1\\)<sup>th</sup> entry of
<code>(stream-enumerate-interval 1 20)</code> should produce a corresponding entry in <code>z</code>,
and this is what we indeed observe, finally obtaining <code>(= sum 210)</code>.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ex-3-52-eval-y\">(display-stream z)
(test 210
      sum)
</pre>
</div>

<p>
However, if <code>delay</code> did not cache its results, the mutation in <code>accum</code> would
cause a different result to be obtained for <code>z</code> (but not for <code>y</code>, since it was
the first evaluated). The execution of <code>y</code> would have gone through the first 14
integers, as before, giving <code>(= sum 136)</code>. The values of <code>seq</code> when <code>z</code> was
executed would therefore all be increased by 136, producing a different stream
for <code>z</code> and a final sum of \\(136 + 210 = 346\\).
</p>


<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>
</li></ol>
</div>

<div id=\"outline-container-sec-1-5-2\" class=\"outline-4\">
<h4 id=\"sec-1-5-2\"><span class=\"section-number-4\">1.5.2</span> <span class=\"todo TODO\">TODO</span> 3.5.2: Infinite Streams</h4>
<div class=\"outline-text-4\" id=\"text-1-5-2\">
<p>
The book defines several miscellaneous procedures that are useful for exercises
in this section:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")

(define (integers-starting-from n)
  (cons-stream n (integers-starting-from (+ n 1))))

(define integers (integers-starting-from 1))

(define (add-streams s1 s2)
  (stream-map + s1 s2))
(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

&lt;&lt;stream-partial-sums&gt;&gt;
&lt;&lt;stream-pairs&gt;&gt;
</pre>
</div>

<p>
<span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2014-11-22 Sat]</span></span>
</p>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-5-2-1\" name=\"sec-1-5-2-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.53\">Exercise 3.53.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-1\">
<p>
This produces a stream consisting of the powers of 2: <code>1 2 4 8 16 ...</code>.
</p>
</div>
</li>

<li><a id=\"sec-1-5-2-2\" name=\"sec-1-5-2-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.54\">Exercise 3.54.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-2\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\"></pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-2-3\" name=\"sec-1-5-2-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.55\">Exercise 3.55.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-3\">
<p>
In order to calculate the partial sum corresponding to an element in the input
stream, you need two pieces of information: the partial sum of the elements
before this one and the element itself. This is most easily done using
recursion. The recursive function call tracks in its parameters the partial sum
of the preceding elements and the start of the remaining input stream and
returns the entire output stream.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-partial-sums\">(include \"stream\")
(define (partial-sums s)
  (let rec ((partial-sum 0)
            (s s))
    (if (stream-null? s)
        the-empty-stream
        (let ((new-sum (+ partial-sum (stream-car s))))
          (cons-stream new-sum
                       (rec new-sum (stream-cdr s)))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"stream-util\")

(test 15
      (stream-ref (partial-sums integers) 4))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-2-4\" name=\"sec-1-5-2-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.56\">Exercise 3.56.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-2-4\">
<p>
The <code>merge</code> procedure combines two streams ordered in ascending order,
eliminating repetitions:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-merge\">(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((&lt; s1car s2car)
                  (cons-stream s1car (merge (stream-cdr s1) s2)))
                 ((&gt; s1car s2car)
                  (cons-stream s2car (merge s1 (stream-cdr s2))))
                 (else
                  (cons-stream s1car
                               (merge (stream-cdr s1)
                                      (stream-cdr s2)))))))))
</pre>
</div>

<p>
Given this, we can create <code>S</code>, the list of integers with no prime factors but
2, 3, and 5:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")
&lt;&lt;stream-merge&gt;&gt;

(define S (cons-stream 1 (merge (scale-stream S 2)
                                (merge (scale-stream S 3)
                                       (scale-stream S 5)))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-2-5\" name=\"sec-1-5-2-5\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.57\">Exercise 3.57.</a><br  /></li>
<li><a id=\"sec-1-5-2-6\" name=\"sec-1-5-2-6\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.58\">Exercise 3.58.</a><br  /></li>
<li><a id=\"sec-1-5-2-7\" name=\"sec-1-5-2-7\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.59\">Exercise 3.59.</a><br  /></li>
<li><a id=\"sec-1-5-2-8\" name=\"sec-1-5-2-8\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.60\">Exercise 3.60.</a><br  /></li>
<li><a id=\"sec-1-5-2-9\" name=\"sec-1-5-2-9\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.61\">Exercise 3.61.</a><br  /></li>
<li><a id=\"sec-1-5-2-10\" name=\"sec-1-5-2-10\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.62\">Exercise 3.62.</a><br  /></li></ol>
</div>

<div id=\"outline-container-sec-1-5-3\" class=\"outline-4\">
<h4 id=\"sec-1-5-3\"><span class=\"section-number-4\">1.5.3</span> <span class=\"todo TODO\">TODO</span> 3.5.3: Exploiting the Stream Paradigm</h4>
<div class=\"outline-text-4\" id=\"text-1-5-3\">
<p>
For convenience:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-pairs\">(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))
(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))
</pre>
</div>
</div>

<ol class=\"org-ol\"><li><a id=\"sec-1-5-3-1\" name=\"sec-1-5-3-1\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.63\">Exercise 3.63.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-1\">
<p>
<b>TODO</b>: Explain better.
</p>

<p>
First, note that both procedures are inefficient without memoization, because
<code>guesses</code> has to be evaluated always in Alyssa's version as well. However, with
memoization, the <code>guesses</code> variable is bound in the environment of
<code>sqrt-stream</code>, so the delayed cdr of the stream returned by <code>cons-stream</code> is
memoized after the first call.
</p>
</div>
</li>

<li><a id=\"sec-1-5-3-2\" name=\"sec-1-5-3-2\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.64\">Exercise 3.64.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-2\">
<p>
A straightforward recursive procedure:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")

(define (stream-limit stream tol)
  (let rec ((stream stream)
            (previous +inf))  ; +INF is IEEE-754 positive infinity
    (if (stream-null? stream)
        (error \"STREAM-LIMIT - stream exhausted without tolerance achieved\")
        (let ((current (stream-car stream))
              (rest (stream-cdr stream)))
          (if (&lt; (abs (- previous current)) tol)
              current
              (rec rest current))))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-3\" name=\"sec-1-5-3-3\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.65\">Exercise 3.65.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-3\">
<p>
This is the original sequence:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"ln2-stream\">(include \"stream\")
(include \"stream-util\")

(define (ln2-summands)
  (cons-stream 1.0
               (stream-map (lambda (k)
                             (* (if (even? k) -1.0 1.0)
                                (/ 1.0 k)))
                           (integers-starting-from 2))))
(define (ln2-stream)
  (partial-sums (ln2-summands)))
</pre>
</div>

<p>
In order to accelerate the \\(\\ln{2}\\) sequence, we use the Euler transform from
this subsection:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\" id=\"stream-euler-transform\">(define (make-tableau transform s)
  (cons-stream s
               (make-tableau transform
                             (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car
              (make-tableau transform s)))

(define (square x) (* x x))
(define (euler-transform s)
  (let ((s0 (stream-ref s 0))           ; S_{n-1}
        (s1 (stream-ref s 1))           ; S_{n}
        (s2 (stream-ref s 2)))          ; S_{n+1}
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))
</pre>
</div>

<p>
We put the sequence and the transform in the same file for ease of testing:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">&lt;&lt;stream-euler-transform&gt;&gt;
&lt;&lt;ln2-stream&gt;&gt;
</pre>
</div>

<p>
With that, we can calculate the convergence of the original sequence as well as
its acceleration one and two times. As expected, the more accelerated sequences
converge much faster&#x2014;while the original sequence has not converged even after
hundreds of iterations, it only takes 10 iterations for the first accelerated
sequence to converge to the limits of floating-point accuracy, and 5 iterations
for the second accelerated sequence.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-65\")

(define orig (ln2-stream))
(define acc1 (accelerated-sequence euler-transform orig))
(define acc2 (accelerated-sequence euler-transform acc1))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-4\" name=\"sec-1-5-3-4\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.66\">Exercise 3.66.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-4\">
<p>
Here are the first twenty pairs:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(test (map (lambda (i) (stream-ref (pairs integers integers) i))
           (iota 20))
      '((1 1) (1 2) (2 2) (1 3) (2 3) (1 4) (3 3) (1 5) (2 4) (1 6)
        (3 4) (1 7) (2 5) (1 8) (4 4) (1 9) (2 6) (1 10) (3 5) (1 11)))
</pre>
</div>

<p>
Notice that two streams seem to be interleaved:
</p>

<ul class=\"org-ul\">
<li>A stream of pairs <code>(1 k)</code> in the second, fourth, etc. positions; i.e., where
\\(i\\) is odd (starting from \\(0\\)). More
precisely, if <code>(odd? i)</code>, <code>(stream-ref pairs-stream i)</code> is
<code>(+ 1 (quotient (- i 1) 2))</code>.
</li>
<li>A stream of pairs where all pairs that sum to \\(n\\) are generated before those
that sum to \\(n + 1\\). In these pairs, \\(i\\) decreases from \\(\\lfloor n / 2 \\rfloor\\) to \\(2\\),
since \\(i = 1\\) is already taken.
</li>
</ul>
</div>
</li>

<li><a id=\"sec-1-5-3-5\" name=\"sec-1-5-3-5\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.67\">Exercise 3.67.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-5\">
<p>
We proceed by induction. Consider the case where all pairs \\((S_{k < i}, T_{j})\\)
have been generated. Then the stream to generate consists of the following
three parts:
</p>

<ul class=\"org-ul\">
<li>The single element \\((S_{i}, T_{0})\\).
</li>
<li>The pairs of \\(S_{i}\\) with the rest of the elements in \\(T\\): \\((S_{i}, T_{j > 0})\\).
</li>
<li>The pairs the remaining elements of \\(S\\) with everything: \\((S_{k > i}, T_{j})\\).
</li>
</ul>

<p>
The pair \\((S_{0}, T_{0})\\) is obviously in the stream to be generated, so our
construction in fact does produce all the pairs \\((S_{i}, T_{j})\\). The Scheme
implementation below straightforwardly generates these three parts of the
stream (see the comments):
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (both-pairs s t)
  (cons-stream
   ;; (S_{i}, T_{0})
   (list (stream-car s) (stream-car t))
   (interleave
    ;; (S_{i}, T_{j &gt; 0})
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    ;; (S_{k &gt; i}, T_{j})
    (both-pairs (stream-cdr s) t))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-67\")
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-6\" name=\"sec-1-5-3-6\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.68\">Exercise 3.68.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-6\">
<p>
This does not work&#x2014;it generates the list \\((S_{i}, T_{j}), i \\leq j\\).
</p>
</div>
</li>

<li><a id=\"sec-1-5-3-7\" name=\"sec-1-5-3-7\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.69\">Exercise 3.69.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-7\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (triples s t u)
  )
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-8\" name=\"sec-1-5-3-8\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.70\">Exercise 3.70.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-8\">
<p>
Here, we want to construct a list of all pairs \\((S_{i}, T_{j})\\) just as in Exercise
3.67, but we want to make sure that instead of interleaving streams one after
the other, we interleave according to whichever stream has a first element with
a smaller weight.
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (merge-weighted s1 s2 weight)
  (let recur ((s1 s1) (s2 s2))
    (cond ((stream-null? s1) s2)
          ((stream-null? s2) s1)
          (else
           (let* ((s1car (stream-car s1))
                  (s2car (stream-car s2))
                  (w (weight s1car s2car))
                  (wrev (weight s2car s1car)))
             (cond ((&lt; w wrev)
                    (cons-stream s1car (recur (stream-cdr s1) s2)))
                   ((&gt; w wrev)
                    (cons-stream s2car (recur s1 (stream-cdr s2))))
                   (else
                    (cons-stream s1car
                                 (recur (stream-cdr s1)
                                        (stream-cdr s2))))))))))
</pre>
</div>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (weighted-pairs s t weight)
  (cons-stream
   ;; (S_{i}, T_{0})
   (list (stream-car s) (stream-car t))
   (merge-weighted
    ;; (S_{i}, T_{j &gt; 0})
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    ;; (S_{k &gt; i}, T_{j})
    (both-pairs (stream-cdr s) t)
    weight)))
</pre>
</div>

<p>
Now we can compute:
</p>

<ol class=\"org-ol\">
<li>the stream of all pairs of positive integers \\((i, j)\\) with \\((i \\leq j)\\)
   ordered according to the sum \\(i + j\\):

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(use test)
(include \"ex-3-70\")

(define stream-a (weighted-pairs integers integers &lt;))
(define stream-b
  (stream-filter (lambda (p)
                   (not (apply or
                               (map (lambda (q)
                                      (= 0 (remainder p q)))
                                    '(2 3 5)))))
                 (weighted-pairs integers integers
                                 (lambda (i j)
                                   (+ (* 2 i)
                                      (* 3 j)
                                      (* 5 i j))))))
</pre>
</div>
</li>
</ol>
</div>
</li>

<li><a id=\"sec-1-5-3-9\" name=\"sec-1-5-3-9\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.71\">Exercise 3.71.</a><br  /></li>
<li><a id=\"sec-1-5-3-10\" name=\"sec-1-5-3-10\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.72\">Exercise 3.72.</a><br  /></li>
<li><a id=\"sec-1-5-3-11\" name=\"sec-1-5-3-11\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.73\">Exercise 3.73.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-11\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (integral integrand initial-value dt)
  (define int
    (cons-stream initial-value
                 (add-streams (scale-stream integrand dt)
                              int)))
  int)
</pre>
</div>


<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(include \"stream\")
(include \"stream-util\")

(define (RC R C dt)
  (define (circuit i v0)
    (add-streams (scale-stream i R)
                 (integral (scale-stream i (/ 1.0 C)) v0)))
  circuit)
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-12\" name=\"sec-1-5-3-12\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.74\">Exercise 3.74.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-12\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define zero-crossings
  (stream-map sign-change-detector
              sense-data
              (stream-cdr sense-data)))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-13\" name=\"sec-1-5-3-13\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.75\">Exercise 3.75.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-13\">
<p>
I believe the bug is that Louis' program claims that <code>last-value</code> is the
computed average value from the previous iteration. However, what Alyssa
actually wants is the original value from the previous iteration. This is, I
believe, a correct version of the function:
</p>

<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (make-zero-crossings input-stream last-value)
  (let* ((current (stream-car input-stream))
         (avpt (/ (+ current last-value) 2)))
    (cons-stream
     (sign-change-detector current last-value)
     (make-zero-crossings
      (stream-cdr input-stream) current))))
</pre>
</div>
</div>
</li>

<li><a id=\"sec-1-5-3-14\" name=\"sec-1-5-3-14\"></a><span class=\"done DONE\">DONE</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.76\">Exercise 3.76.</a><br  /><div class=\"outline-text-5\" id=\"text-1-5-3-14\">
<div class=\"org-src-container\">

<pre class=\"src src-scheme\">(define (smooth input-stream)
  (define (inner input-stream last-value)
    (let* ((current (stream-car input-stream))
           (avpt (/ (+ current last-value) 2)))
      (cons-stream avpt
                   (inner (stream-cdr input-stream) current))))
  (inner input-stream 0))

(define zero-crossings
  (let ((s (smooth sense-stream)))
    (stream-map sign-change-detector
                s (cdr s))))
</pre>
</div>
</div>
</li></ol>
</div>


<div id=\"outline-container-sec-1-5-4\" class=\"outline-4\">
<h4 id=\"sec-1-5-4\"><span class=\"section-number-4\">1.5.4</span> <span class=\"todo TODO\">TODO</span> 3.5.4: Streams and Delayed Evaluation</h4>
<div class=\"outline-text-4\" id=\"text-1-5-4\">
</div>
<ol class=\"org-ol\"><li><a id=\"sec-1-5-4-1\" name=\"sec-1-5-4-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.77\">Exercise 3.77.</a><br  /></li>
<li><a id=\"sec-1-5-4-2\" name=\"sec-1-5-4-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.78\">Exercise 3.78.</a><br  /></li>
<li><a id=\"sec-1-5-4-3\" name=\"sec-1-5-4-3\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.79\">Exercise 3.79.</a><br  /></li>
<li><a id=\"sec-1-5-4-4\" name=\"sec-1-5-4-4\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.80\">Exercise 3.80.</a><br  /></li></ol>
</div>

<div id=\"outline-container-sec-1-5-5\" class=\"outline-4\">
<h4 id=\"sec-1-5-5\"><span class=\"section-number-4\">1.5.5</span> <span class=\"todo TODO\">TODO</span> 3.5.5: Modularity of Functional Programs and Modularity of Objects</h4>
<div class=\"outline-text-4\" id=\"text-1-5-5\">
</div><ol class=\"org-ol\"><li><a id=\"sec-1-5-5-1\" name=\"sec-1-5-5-1\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.81\">Exercise 3.81.</a><br  /></li>
<li><a id=\"sec-1-5-5-2\" name=\"sec-1-5-5-2\"></a><span class=\"todo TODO\">TODO</span> <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%25_thm_3.82\">Exercise 3.82.</a><br  /></li></ol>
</div>
</div>
</div>
</div>
<div id=\"postamble\" class=\"status\">
<p class=\"author\">Author: Robert Irelan</p>
<p class=\"email\">Email: <a href=\"mailto:rirelan@gmail.com\">rirelan@gmail.com</a></p>
<p class=\"date\">Created: 2015-01-19 Mon 18:41</p>
<p class=\"creator\"><a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 24.4.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</p>
<p class=\"validation\"><a href=\"http://validator.w3.org/check?uri=referer\">Validate</a></p>
</div>
</body>
</html>" #("avpt" 0 4 (face nil font-lock-multiline t font-lock-fontified t fontified t hilit-chg hilit-chg)) #("avpt" 0 4 (fontified t hilit-chg hilit-chg)) #("(stream-car input-stream)" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t hilit-chg hilit-chg) 1 23 (fontified t hilit-chg hilit-chg) 23 24 (fontified t hilit-chg hilit-chg) 24 25 (face (rainbow-delimiters-depth-7-face) fontified t hilit-chg hilit-chg)) #(" " 0 1 (hilit-chg hilit-chg fontified t)) "(define (make-zero-crossings input-stream last-value)
(let ((avpt (/ (+ (stream-car input-stream)
last-value)
2)))
(cons-stream
(sign-change-detector avpt last-value)
(make-zero-crossings
(stream-cdr input-stream) avpt))))" #("(define ())
" 0 1 (yank-handler (evil-yank-line-handler) face (rainbow-delimiters-depth-1-face) hilit-chg hilit-chg fontified t) 1 7 (yank-handler (evil-yank-line-handler) face font-lock-keyword-face hilit-chg hilit-chg fontified t) 7 8 (yank-handler (evil-yank-line-handler) hilit-chg hilit-chg fontified t) 8 9 (yank-handler (evil-yank-line-handler) face (rainbow-delimiters-depth-2-face) hilit-chg hilit-chg fontified t) 9 10 (yank-handler (evil-yank-line-handler) face (rainbow-delimiters-depth-2-face) hilit-chg hilit-chg fontified t) 10 11 (yank-handler (evil-yank-line-handler) face (rainbow-delimiters-depth-1-face) hilit-chg hilit-chg fontified t) 11 12 (yank-handler (evil-yank-line-handler))) #("last-value" 0 10 (fontified t)) #("last-value))))" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-5-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t)) #("(stream-car input-stream)" 0 1 (face (rainbow-delimiters-depth-8-face) fontified t) 1 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-8-face) fontified t)) #("
" 0 1 (org-category "todo" fontified t)) #("Louis' program is incorrect because you don't
" 0 46 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3")) #("
" 0 1 (yank-handler (evil-yank-line-handler) hilit-chg hilit-chg fontified t font-lock-fontified t font-lock-multiline t face nil)) #(" " 0 1 (hilit-chg hilit-chg fontified t)) #(" " 0 1 (hilit-chg hilit-chg fontified t)) #("k" 0 1 (hilit-chg hilit-chg fontified t)) #(" " 0 1 (hilit-chg hilit-chg fontified t)) #("(weighted-pairs integers integers <)" 0 1 (face (rainbow-delimiters-depth-2-face) hilit-chg hilit-chg fontified t) 1 35 (hilit-chg hilit-chg fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) hilit-chg hilit-chg fontified t)) #("(define stream-a (weighted-pairs integers integers <))
" 0 1 (yank-handler (evil-yank-line-handler) fontified t face (rainbow-delimiters-depth-1-face)) 1 7 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 7 8 (yank-handler (evil-yank-line-handler) fontified t) 8 16 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t) 17 18 (yank-handler (evil-yank-line-handler) fontified t face (rainbow-delimiters-depth-2-face)) 18 52 (yank-handler (evil-yank-line-handler) fontified t) 52 53 (yank-handler (evil-yank-line-handler) fontified t face (rainbow-delimiters-depth-2-face)) 53 54 (yank-handler (evil-yank-line-handler) fontified t face (rainbow-delimiters-depth-1-face)) 54 55 (yank-handler (evil-yank-line-handler) fontified t)) #("(define stream-b (stream-filter (lambda (k)
                                  (not (or (= 0 (remainder k 2) (stream-filter (lambda (k)
                                                                                 (not (or (= 0 (remainder k 2) (stream-filter (lambda (k)
                                                                                                                                (not (or (= 0 (remainder k 2) (stream-filter (lambda (k)
                                                                                                                                                                               (not (or (= 0 (remainder k 2) (stream-filter (lambda (k)
                                                                                                                                                                                                                              (not (or (= 0 (remainder k 2) (stream-filter (lambda (k)
                                                                                                                                                                                                                                                                             (not (or (= 0 (remainder k 2) (stream-filter ))))))))))))))))))))))))))))))))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 16 (face font-lock-function-name-face fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) hilit-chg hilit-chg fontified t) 18 32 (hilit-chg hilit-chg fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) hilit-chg hilit-chg fontified t) 33 39 (face font-lock-keyword-face hilit-chg hilit-chg fontified t) 39 40 (hilit-chg hilit-chg fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) hilit-chg hilit-chg fontified t) 41 42 (hilit-chg hilit-chg fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) hilit-chg hilit-chg fontified t) 43 44 (hilit-chg hilit-chg fontified t) 44 78 (hilit-chg hilit-chg fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) hilit-chg hilit-chg fontified t) 79 83 (hilit-chg hilit-chg fontified t) 83 84 (face (rainbow-delimiters-depth-5-face) hilit-chg hilit-chg fontified t) 84 86 (face font-lock-keyword-face hilit-chg hilit-chg fontified t) 86 87 (hilit-chg hilit-chg fontified t) 87 88 (face (rainbow-delimiters-depth-6-face) hilit-chg hilit-chg fontified t) 88 92 (hilit-chg hilit-chg fontified t) 92 93 (face (rainbow-delimiters-depth-7-face) hilit-chg hilit-chg fontified t) 93 106 (hilit-chg hilit-chg fontified t) 106 107 (face (rainbow-delimiters-depth-7-face) hilit-chg hilit-chg fontified t) 107 108 (hilit-chg hilit-chg fontified t) 108 109 (face (rainbow-delimiters-depth-7-face) hilit-chg hilit-chg fontified t) 109 123 (hilit-chg hilit-chg fontified t) 123 124 (face (rainbow-delimiters-depth-8-face) hilit-chg hilit-chg fontified t) 124 130 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 130 131 (face (whitespace-line) hilit-chg hilit-chg fontified t) 131 132 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 132 133 (face (whitespace-line) hilit-chg hilit-chg fontified t) 133 134 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 134 135 (hilit-chg hilit-chg fontified t) 135 215 (hilit-chg hilit-chg fontified t) 215 216 (face (whitespace-line) hilit-chg hilit-chg fontified t) 216 217 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 217 221 (face (whitespace-line) hilit-chg hilit-chg fontified t) 221 222 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 222 224 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 224 225 (face (whitespace-line) hilit-chg hilit-chg fontified t) 225 226 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 226 230 (face (whitespace-line) hilit-chg hilit-chg fontified t) 230 231 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 231 244 (face (whitespace-line) hilit-chg hilit-chg fontified t) 244 245 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 245 246 (face (whitespace-line) hilit-chg hilit-chg fontified t) 246 247 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 247 261 (face (whitespace-line) hilit-chg hilit-chg fontified t) 261 262 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 262 268 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 268 269 (face (whitespace-line) hilit-chg hilit-chg fontified t) 269 270 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 270 271 (face (whitespace-line) hilit-chg hilit-chg fontified t) 271 272 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 272 273 (hilit-chg hilit-chg fontified t) 273 353 (hilit-chg hilit-chg fontified t) 353 401 (face (whitespace-line) hilit-chg hilit-chg fontified t) 401 402 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 402 406 (face (whitespace-line) hilit-chg hilit-chg fontified t) 406 407 (face (rainbow-delimiters-depth-6-face whitespace-line) hilit-chg hilit-chg fontified t) 407 409 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 409 410 (face (whitespace-line) hilit-chg hilit-chg fontified t) 410 411 (face (rainbow-delimiters-depth-7-face whitespace-line) hilit-chg hilit-chg fontified t) 411 415 (face (whitespace-line) hilit-chg hilit-chg fontified t) 415 416 (face (rainbow-delimiters-depth-8-face whitespace-line) hilit-chg hilit-chg fontified t) 416 429 (face (whitespace-line) hilit-chg hilit-chg fontified t) 429 430 (face (rainbow-delimiters-depth-8-face whitespace-line) hilit-chg hilit-chg fontified t) 430 431 (face (whitespace-line) hilit-chg hilit-chg fontified t) 431 432 (face (rainbow-delimiters-depth-8-face whitespace-line) hilit-chg hilit-chg fontified t) 432 446 (face (whitespace-line) hilit-chg hilit-chg fontified t) 446 447 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 447 453 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 453 454 (face (whitespace-line) hilit-chg hilit-chg fontified t) 454 455 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 455 456 (face (whitespace-line) hilit-chg hilit-chg fontified t) 456 457 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 457 458 (hilit-chg hilit-chg fontified t) 458 538 (hilit-chg hilit-chg fontified t) 538 633 (face (whitespace-line) hilit-chg hilit-chg fontified t) 633 634 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 634 638 (face (whitespace-line) hilit-chg hilit-chg fontified t) 638 639 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 639 641 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 641 642 (face (whitespace-line) hilit-chg hilit-chg fontified t) 642 643 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 643 647 (face (whitespace-line) hilit-chg hilit-chg fontified t) 647 648 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 648 661 (face (whitespace-line) hilit-chg hilit-chg fontified t) 661 662 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 662 663 (face (whitespace-line) hilit-chg hilit-chg fontified t) 663 664 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 664 678 (face (whitespace-line) hilit-chg hilit-chg fontified t) 678 679 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 679 685 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 685 686 (face (whitespace-line) hilit-chg hilit-chg fontified t) 686 687 (face (rainbow-delimiters-depth-6-face whitespace-line) hilit-chg hilit-chg fontified t) 687 688 (face (whitespace-line) hilit-chg hilit-chg fontified t) 688 689 (face (rainbow-delimiters-depth-6-face whitespace-line) hilit-chg hilit-chg fontified t) 689 690 (hilit-chg hilit-chg fontified t) 690 770 (hilit-chg hilit-chg fontified t) 770 912 (face (whitespace-line) hilit-chg hilit-chg fontified t) 912 913 (face (rainbow-delimiters-depth-6-face whitespace-line) hilit-chg hilit-chg fontified t) 913 917 (face (whitespace-line) hilit-chg hilit-chg fontified t) 917 918 (face (rainbow-delimiters-depth-7-face whitespace-line) hilit-chg hilit-chg fontified t) 918 920 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 920 921 (face (whitespace-line) hilit-chg hilit-chg fontified t) 921 922 (face (rainbow-delimiters-depth-8-face whitespace-line) hilit-chg hilit-chg fontified t) 922 926 (face (whitespace-line) hilit-chg hilit-chg fontified t) 926 927 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 927 940 (face (whitespace-line) hilit-chg hilit-chg fontified t) 940 941 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 941 942 (face (whitespace-line) hilit-chg hilit-chg fontified t) 942 943 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 943 957 (face (whitespace-line) hilit-chg hilit-chg fontified t) 957 958 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 958 964 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 964 965 (face (whitespace-line) hilit-chg hilit-chg fontified t) 965 966 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 966 967 (face (whitespace-line) hilit-chg hilit-chg fontified t) 967 968 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 968 969 (hilit-chg hilit-chg fontified t) 969 1049 (hilit-chg hilit-chg fontified t) 1049 1238 (face (whitespace-line) hilit-chg hilit-chg fontified t) 1238 1239 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 1239 1243 (face (whitespace-line) hilit-chg hilit-chg fontified t) 1243 1244 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 1244 1246 (face (whitespace-line font-lock-keyword-face) hilit-chg hilit-chg fontified t) 1246 1247 (face (whitespace-line) hilit-chg hilit-chg fontified t) 1247 1248 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 1248 1252 (face (whitespace-line) hilit-chg hilit-chg fontified t) 1252 1253 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 1253 1266 (face (whitespace-line) hilit-chg hilit-chg fontified t) 1266 1267 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 1267 1268 (face (whitespace-line) hilit-chg hilit-chg fontified t) 1268 1269 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 1269 1283 (face (whitespace-line) hilit-chg hilit-chg fontified t) 1283 1284 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 1284 1285 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 1285 1286 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 1286 1287 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 1287 1288 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 1288 1289 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 1289 1290 (face (rainbow-delimiters-depth-8-face whitespace-line) hilit-chg hilit-chg fontified t) 1290 1291 (face (rainbow-delimiters-depth-7-face whitespace-line) hilit-chg hilit-chg fontified t) 1291 1292 (face (rainbow-delimiters-depth-6-face whitespace-line) hilit-chg hilit-chg fontified t) 1292 1293 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 1293 1294 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 1294 1295 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 1295 1296 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 1296 1297 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 1297 1298 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 1298 1299 (face (rainbow-delimiters-depth-8-face whitespace-line) hilit-chg hilit-chg fontified t) 1299 1300 (face (rainbow-delimiters-depth-7-face whitespace-line) hilit-chg hilit-chg fontified t) 1300 1301 (face (rainbow-delimiters-depth-6-face whitespace-line) hilit-chg hilit-chg fontified t) 1301 1302 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 1302 1303 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 1303 1304 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 1304 1305 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 1305 1306 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t) 1306 1307 (face (rainbow-delimiters-depth-9-face whitespace-line) hilit-chg hilit-chg fontified t) 1307 1308 (face (rainbow-delimiters-depth-8-face whitespace-line) hilit-chg hilit-chg fontified t) 1308 1309 (face (rainbow-delimiters-depth-7-face whitespace-line) hilit-chg hilit-chg fontified t) 1309 1310 (face (rainbow-delimiters-depth-6-face whitespace-line) hilit-chg hilit-chg fontified t) 1310 1311 (face (rainbow-delimiters-depth-5-face whitespace-line) hilit-chg hilit-chg fontified t) 1311 1312 (face (rainbow-delimiters-depth-4-face whitespace-line) hilit-chg hilit-chg fontified t) 1312 1313 (face (rainbow-delimiters-depth-3-face whitespace-line) hilit-chg hilit-chg fontified t) 1313 1314 (face (rainbow-delimiters-depth-2-face whitespace-line) hilit-chg hilit-chg fontified t) 1314 1315 (face (rainbow-delimiters-depth-1-face whitespace-line) hilit-chg hilit-chg fontified t)) #("(weighted-pairs integers integers
                                 )" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 33 (fontified t) 33 67 (hilit-chg hilit-chg fontified t) 67 68 (face (rainbow-delimiters-depth-2-face) hilit-chg hilit-chg fontified t)) #("<" 0 1 (fontified t)) #("(weighted-pairs integers integers +)" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 34 (fontified t) 34 35 (hilit-chg hilit-chg fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) hilit-chg hilit-chg fontified t)) #("2" 0 1 (face nil font-lock-multiline t font-lock-fontified t org-category "ch3" fontified t)) #("1" 0 1 (face nil font-lock-multiline t font-lock-fontified t org-category "ch3" fontified t)) #("2" 0 1 (face nil font-lock-multiline t font-lock-fontified t org-category "ch3" fontified t)) #("1" 0 1 (face nil font-lock-multiline t font-lock-fontified t org-category "ch3" fontified t)) #("s2" 0 2 (face nil font-lock-multiline t font-lock-fontified t org-category "ch3" fontified t)) #("                    (w (weight s1car s2car))
" 0 20 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil) 20 21 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-7-face)) 21 22 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil) 22 23 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t hilit-chg hilit-chg-delete font-lock-multiline t face nil) 23 24 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-8-face)) 24 33 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil) 33 36 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t hilit-chg hilit-chg font-lock-multiline t face nil) 36 42 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t hilit-chg hilit-chg font-lock-multiline t face nil) 42 43 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-8-face)) 43 44 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-7-face)) 44 45 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil)) #("                    (s2car (stream-car s2))
" 0 20 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil) 20 21 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-7-face)) 21 27 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil) 27 28 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-8-face)) 28 41 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil) 41 42 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-8-face)) 42 43 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-7-face)) 43 44 (yank-handler (evil-yank-line-handler) fontified t org-category "ch3" font-lock-fontified t font-lock-multiline t face nil)) #("2" 0 1 (face nil font-lock-multiline t font-lock-fontified t org-category "ch3" fontified t))))
(setq search-ring '("expir" "org-p" "org-" "drill" "329" "ws-bu" "define" "long line" "paredit" "init-pre" "slime-fu" "slime-fuzz" "el-swank-fuzz" "fuzzy" "slime" "backup"))
(setq regexp-search-ring '("tn" "notifications-notify" "org-clock.*expire" "8466" "11" "ABNS" "Q2" "Chronicle" "SSH" "avg" "\\_</\\_>" "weight" "16" "10" "====" "capture-te"))
(setq compile-history 'nil)
